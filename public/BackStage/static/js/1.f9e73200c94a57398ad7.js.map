{"version":3,"sources":["webpack:///./node_modules/_vue-cropperjs@3.0.0@vue-cropperjs/dist/VueCropper.js","webpack:///./node_modules/_cropperjs@1.5.6@cropperjs/dist/cropper.js","webpack:///src/components/view/Upload.vue","webpack:///./src/components/view/Upload.vue?a07e","webpack:///./src/components/view/Upload.vue"],"names":["Object","defineProperty","exports","value","obj","_cropperjs","__webpack_require__","_cropperjs2","__esModule","default","render","h","style","this","containerStyle","ref","attrs","src","alt","imgStyle","props","type","String","viewMode","Number","dragMode","aspectRatio","data","preview","Array","Element","NodeList","responsive","Boolean","restore","checkCrossOrigin","checkOrientation","modal","guides","center","highlight","background","autoCrop","autoCropArea","movable","rotatable","scalable","zoomable","zoomOnTouch","zoomOnWheel","wheelZoomRatio","cropBoxMovable","cropBoxResizable","toggleDragModeOnDblclick","minCanvasWidth","minCanvasHeight","minCropBoxWidth","minCropBoxHeight","minContainerWidth","minContainerHeight","ready","Function","cropstart","cropmove","cropend","crop","zoom","mounted","_$options$props","$options","keys","target","i","indexOf","prototype","hasOwnProperty","call","_objectWithoutProperties","key","undefined","cropper","$refs","img","methods","reset","clear","initCrop","replace","url","onlyColorChanged","arguments","length","enable","disable","destroy","move","offsetX","offsetY","moveTo","x","y","relativeZoom","ratio","_originalEvent","zoomTo","rotate","degree","rotateTo","scaleX","_scaleX","scaleY","_scaleY","scale","getData","rounded","setData","getContainerData","getImageData","getCanvasData","setCanvasData","getCropBoxData","setCropBoxData","getCroppedCanvas","options","setAspectRatio","setDragMode","mode","factory","_typeof","Symbol","iterator","constructor","_defineProperties","descriptor","enumerable","configurable","writable","_defineProperty","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","source","forEach","getOwnPropertyDescriptors","defineProperties","_toConsumableArray","arr","isArray","arr2","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","IS_BROWSER","window","document","WINDOW","IS_TOUCH_DEVICE","documentElement","HAS_POINTER_EVENT","CLASS_CROP","concat","CLASS_DISABLED","CLASS_HIDDEN","CLASS_HIDE","CLASS_INVISIBLE","CLASS_MODAL","CLASS_MOVE","DATA_ACTION","DATA_PREVIEW","EVENT_POINTER_DOWN","EVENT_POINTER_MOVE","EVENT_POINTER_UP","REGEXP_ACTIONS","REGEXP_DATA_URL","REGEXP_DATA_URL_JPEG","REGEXP_TAG_NAME","DEFAULTS","initialAspectRatio","NaN","isNaN","isNumber","isPositiveNumber","Infinity","isUndefined","isObject","isPlainObject","_constructor","error","isFunction","slice","toArray","callback","assign","_len","args","_key","arg","REGEXP_DECIMALS","normalizeDecimalNumber","times","test","Math","round","REGEXP_SUFFIX","setStyle","element","styles","property","addClass","elem","classList","add","className","trim","removeClass","remove","toggleClass","added","REGEXP_CAMEL_CASE","toParamCase","toLowerCase","name","dataset","getAttribute","setAttribute","REGEXP_SPACES","onceSupported","supported","once","listener","get","set","addEventListener","removeEventListener","removeListener","handler","split","event","listeners","addListener","_handler","_element$listeners","_len2","_key2","dispatchEvent","Event","CustomEvent","detail","bubbles","cancelable","createEvent","initCustomEvent","getOffset","box","getBoundingClientRect","left","pageXOffset","clientLeft","top","pageYOffset","clientTop","location","REGEXP_ORIGINS","isCrossOriginURL","parts","match","protocol","hostname","port","addTimestamp","timestamp","Date","getTime","getTransforms","_ref","translateX","translateY","values","transform","join","WebkitTransform","msTransform","getPointer","_ref2","endOnly","pageX","pageY","end","endX","endY","startX","startY","getAdjustedSizes","_ref4","height","width","isValidWidth","isValidHeight","adjustedWidth","fromCharCode","REGEXP_DATA_URL_HEAD","resetAndGetOrientation","arrayBuffer","orientation","dataView","DataView","littleEndian","app1Start","ifdStart","getUint8","byteLength","offset","tiffOffset","start","str","getStringFromCharCode","endianness","getUint16","firstIFDOffset","getUint32","_offset","_length","setUint16","initContainer","initCanvas","initCropBox","renderCanvas","cropped","renderCropBox","container","containerData","max","offsetWidth","offsetHeight","imageData","rotated","abs","naturalWidth","naturalHeight","canvasWidth","canvasHeight","canvasData","oldLeft","oldTop","limited","limitCanvas","initialImageData","initialCanvasData","sizeLimited","positionLimited","cropBoxData","_getAdjustedSizes","minWidth","minHeight","maxWidth","maxHeight","newCanvasLeft","newCanvasTop","minLeft","min","minTop","maxLeft","maxTop","changed","transformed","_getRotatedSizes","_ref5","arc","PI","sinArc","sin","cosArc","cos","newWidth","newHeight","getRotatedSizes","canvas","renderImage","limitCropBox","image","output","initialCropBoxData","maxCropBoxWidth","maxCropBoxHeight","face","cropBox","disabled","initPreview","crossOrigin","crossOriginUrl","createElement","viewBox","appendChild","viewBoxImage","previews","ownerDocument","querySelectorAll","querySelector","el","html","innerHTML","cssText","resetPreview","removeAttribute","removeData","cropBoxWidth","cropBoxHeight","originalWidth","originalHeight","getElementsByTagName","events","bind","onCropStart","cropStart","onWheel","wheel","passive","capture","onDblclick","dblclick","onCropMove","cropMove","onCropEnd","cropEnd","onResize","resize","unbind","handlers","n","dragBox","contains","_this","delta","preventDefault","wheeling","setTimeout","deltaY","wheelDelta","buttons","button","pointerType","ctrlKey","action","pointers","changedTouches","touch","identifier","pointerId","originalEvent","cropping","change","right","bottom","renderable","shiftKey","pointer","range","check","side","pointers2","ratios","pointer2","x1","y1","x2","y2","z1","sqrt","sort","a","b","getMaxZoomRatio","p","hasSameSize","isImg","replaced","uncreate","load","originalUrl","_this$canvasData","pivot","oldRatio","count","_ref3","getPointersCenter","sized","widthChanged","heightChanged","HTMLCanvasElement","_ref6","_ref7","_ref8","imageAspectRatio","imageNaturalWidth","imageNaturalHeight","_ref6$rotate","_ref6$scaleX","_ref6$scaleY","_ref8$fillColor","fillColor","_ref8$imageSmoothingE","imageSmoothingEnabled","_ref8$imageSmoothingQ","imageSmoothingQuality","_ref8$maxWidth","_ref8$maxHeight","_ref8$minWidth","_ref8$minHeight","context","getContext","maxSizes","minSizes","destMaxSizes","destMinSizes","destWidth","destHeight","params","fillStyle","fillRect","save","translate","drawImage","map","param","floor","getSourceCanvas","_this$getData","initialX","initialY","initialWidth","initialHeight","_options$imageSmoothi","srcWidth","srcHeight","dstX","dstY","dstWidth","dstHeight","sourceWidth","sourceHeight","srcX","srcY","croppable","AnotherCropper","Cropper","instance","Constructor","_classCallCheck","tagName","Error","reloading","sizing","init","protoProps","staticProps","toDataURL","ArrayBuffer","read","base64","binary","atob","uint8","Uint8Array","charCodeAt","clone","xhr","XMLHttpRequest","onabort","onerror","ontimeout","onprogress","getResponseHeader","abort","onload","response","onloadend","open","responseType","withCredentials","send","mimeType","chunks","subarray","btoa","arrayBufferToDataURL","_parseOrientation","parseOrientation","stop","parentNode","insertBefore","nextSibling","_this2","isIOSWebKit","navigator","userAgent","done","build","sizingImage","body","removeChild","template","getElementsByClassName","unbuild","module","Upload","defaultSrc","fileList","imgSrc","cropImg","dialogVisible","components","VueCropper","setImage","e","file","files","includes","reader","FileReader","result","readAsDataURL","cropImage","cancelCrop","imageuploaded","res","console","log","handleError","$notify","title","message","created","view_Upload","_vm","_h","$createElement","_c","_self","staticClass","separator","_v","$url","multiple","staticRenderFns","Component","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/1.f9e73200c94a57398ad7.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _cropperjs = require('cropperjs');\n\nvar _cropperjs2 = _interopRequireDefault(_cropperjs);\n\nrequire('cropperjs/dist/cropper.css');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nexports.default = {\n  render: function render(h) {\n    return h('div', { style: this.containerStyle }, [h('img', {\n      ref: 'img',\n      attrs: {\n        src: this.src,\n        alt: this.alt || 'image',\n        style: 'max-width: 100%'\n      },\n      style: this.imgStyle\n    })]);\n  },\n\n  props: {\n    containerStyle: Object,\n    src: {\n      type: String,\n      default: ''\n    },\n    alt: String,\n    imgStyle: Object,\n\n    viewMode: Number,\n    dragMode: String,\n    aspectRatio: Number,\n    data: Object,\n    preview: [String, Array, Element, NodeList],\n    responsive: {\n      type: Boolean,\n      default: true\n    },\n    restore: {\n      type: Boolean,\n      default: true\n    },\n    checkCrossOrigin: {\n      type: Boolean,\n      default: true\n    },\n    checkOrientation: {\n      type: Boolean,\n      default: true\n    },\n    modal: {\n      type: Boolean,\n      default: true\n    },\n    guides: {\n      type: Boolean,\n      default: true\n    },\n    center: {\n      type: Boolean,\n      default: true\n    },\n    highlight: {\n      type: Boolean,\n      default: true\n    },\n    background: {\n      type: Boolean,\n      default: true\n    },\n    autoCrop: {\n      type: Boolean,\n      default: true\n    },\n    autoCropArea: Number,\n    movable: {\n      type: Boolean,\n      default: true\n    },\n    rotatable: {\n      type: Boolean,\n      default: true\n    },\n    scalable: {\n      type: Boolean,\n      default: true\n    },\n    zoomable: {\n      type: Boolean,\n      default: true\n    },\n    zoomOnTouch: {\n      type: Boolean,\n      default: true\n    },\n    zoomOnWheel: {\n      type: Boolean,\n      default: true\n    },\n    wheelZoomRatio: Number,\n    cropBoxMovable: {\n      type: Boolean,\n      default: true\n    },\n    cropBoxResizable: {\n      type: Boolean,\n      default: true\n    },\n    toggleDragModeOnDblclick: {\n      type: Boolean,\n      default: true\n    },\n\n    minCanvasWidth: Number,\n    minCanvasHeight: Number,\n    minCropBoxWidth: Number,\n    minCropBoxHeight: Number,\n    minContainerWidth: Number,\n    minContainerHeight: Number,\n\n    ready: Function,\n    cropstart: Function,\n    cropmove: Function,\n    cropend: Function,\n    crop: Function,\n    zoom: Function\n  },\n  mounted: function mounted() {\n    var _$options$props = this.$options.props,\n        containerStyle = _$options$props.containerStyle,\n        src = _$options$props.src,\n        alt = _$options$props.alt,\n        imgStyle = _$options$props.imgStyle,\n        data = _objectWithoutProperties(_$options$props, ['containerStyle', 'src', 'alt', 'imgStyle']);\n\n    var props = {};\n\n    for (var key in data) {\n      if (this[key] !== undefined) {\n        props[key] = this[key];\n      }\n    }\n\n    this.cropper = new _cropperjs2.default(this.$refs.img, props);\n  },\n\n  methods: {\n    reset: function reset() {\n      return this.cropper.reset();\n    },\n    clear: function clear() {\n      return this.cropper.clear();\n    },\n    initCrop: function initCrop() {\n      return this.cropper.crop();\n    },\n    replace: function replace(url) {\n      var onlyColorChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      return this.cropper.replace(url, onlyColorChanged);\n    },\n    enable: function enable() {\n      return this.cropper.enable();\n    },\n    disable: function disable() {\n      return this.cropper.disable();\n    },\n    destroy: function destroy() {\n      return this.cropper.destroy();\n    },\n    move: function move(offsetX, offsetY) {\n      return this.cropper.move(offsetX, offsetY);\n    },\n    moveTo: function moveTo(x) {\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n\n      return this.cropper.moveTo(x, y);\n    },\n    relativeZoom: function relativeZoom(ratio, _originalEvent) {\n      return this.cropper.zoom(ratio, _originalEvent);\n    },\n    zoomTo: function zoomTo(ratio, _originalEvent) {\n      return this.cropper.zoomTo(ratio, _originalEvent);\n    },\n    rotate: function rotate(degree) {\n      return this.cropper.rotate(degree);\n    },\n    rotateTo: function rotateTo(degree) {\n      return this.cropper.rotateTo(degree);\n    },\n    scaleX: function scaleX(_scaleX) {\n      return this.cropper.scaleX(_scaleX);\n    },\n    scaleY: function scaleY(_scaleY) {\n      return this.cropper.scaleY(_scaleY);\n    },\n    scale: function scale(scaleX) {\n      var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;\n\n      return this.cropper.scale(scaleX, scaleY);\n    },\n    getData: function getData() {\n      var rounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      return this.cropper.getData(rounded);\n    },\n    setData: function setData(data) {\n      return this.cropper.setData(data);\n    },\n    getContainerData: function getContainerData() {\n      return this.cropper.getContainerData();\n    },\n    getImageData: function getImageData() {\n      return this.cropper.getImageData();\n    },\n    getCanvasData: function getCanvasData() {\n      return this.cropper.getCanvasData();\n    },\n    setCanvasData: function setCanvasData(data) {\n      return this.cropper.setCanvasData(data);\n    },\n    getCropBoxData: function getCropBoxData() {\n      return this.cropper.getCropBoxData();\n    },\n    setCropBoxData: function setCropBoxData(data) {\n      return this.cropper.setCropBoxData(data);\n    },\n    getCroppedCanvas: function getCroppedCanvas() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return this.cropper.getCroppedCanvas(options);\n    },\n    setAspectRatio: function setAspectRatio(aspectRatio) {\n      return this.cropper.setAspectRatio(aspectRatio);\n    },\n    setDragMode: function setDragMode(mode) {\n      return this.cropper.setDragMode(mode);\n    }\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-cropperjs@3.0.0@vue-cropperjs/dist/VueCropper.js\n// module id = 2mjw\n// module chunks = 1","/*!\n * Cropper.js v1.5.6\n * https://fengyuanchen.github.io/cropperjs\n *\n * Copyright 2015-present Chen Fengyuan\n * Released under the MIT license\n *\n * Date: 2019-10-04T04:33:48.372Z\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.Cropper = factory());\n}(this, function () { 'use strict';\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(source, true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(source).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  var IS_BROWSER = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n  var WINDOW = IS_BROWSER ? window : {};\n  var IS_TOUCH_DEVICE = IS_BROWSER ? 'ontouchstart' in WINDOW.document.documentElement : false;\n  var HAS_POINTER_EVENT = IS_BROWSER ? 'PointerEvent' in WINDOW : false;\n  var NAMESPACE = 'cropper'; // Actions\n\n  var ACTION_ALL = 'all';\n  var ACTION_CROP = 'crop';\n  var ACTION_MOVE = 'move';\n  var ACTION_ZOOM = 'zoom';\n  var ACTION_EAST = 'e';\n  var ACTION_WEST = 'w';\n  var ACTION_SOUTH = 's';\n  var ACTION_NORTH = 'n';\n  var ACTION_NORTH_EAST = 'ne';\n  var ACTION_NORTH_WEST = 'nw';\n  var ACTION_SOUTH_EAST = 'se';\n  var ACTION_SOUTH_WEST = 'sw'; // Classes\n\n  var CLASS_CROP = \"\".concat(NAMESPACE, \"-crop\");\n  var CLASS_DISABLED = \"\".concat(NAMESPACE, \"-disabled\");\n  var CLASS_HIDDEN = \"\".concat(NAMESPACE, \"-hidden\");\n  var CLASS_HIDE = \"\".concat(NAMESPACE, \"-hide\");\n  var CLASS_INVISIBLE = \"\".concat(NAMESPACE, \"-invisible\");\n  var CLASS_MODAL = \"\".concat(NAMESPACE, \"-modal\");\n  var CLASS_MOVE = \"\".concat(NAMESPACE, \"-move\"); // Data keys\n\n  var DATA_ACTION = \"\".concat(NAMESPACE, \"Action\");\n  var DATA_PREVIEW = \"\".concat(NAMESPACE, \"Preview\"); // Drag modes\n\n  var DRAG_MODE_CROP = 'crop';\n  var DRAG_MODE_MOVE = 'move';\n  var DRAG_MODE_NONE = 'none'; // Events\n\n  var EVENT_CROP = 'crop';\n  var EVENT_CROP_END = 'cropend';\n  var EVENT_CROP_MOVE = 'cropmove';\n  var EVENT_CROP_START = 'cropstart';\n  var EVENT_DBLCLICK = 'dblclick';\n  var EVENT_TOUCH_START = IS_TOUCH_DEVICE ? 'touchstart' : 'mousedown';\n  var EVENT_TOUCH_MOVE = IS_TOUCH_DEVICE ? 'touchmove' : 'mousemove';\n  var EVENT_TOUCH_END = IS_TOUCH_DEVICE ? 'touchend touchcancel' : 'mouseup';\n  var EVENT_POINTER_DOWN = HAS_POINTER_EVENT ? 'pointerdown' : EVENT_TOUCH_START;\n  var EVENT_POINTER_MOVE = HAS_POINTER_EVENT ? 'pointermove' : EVENT_TOUCH_MOVE;\n  var EVENT_POINTER_UP = HAS_POINTER_EVENT ? 'pointerup pointercancel' : EVENT_TOUCH_END;\n  var EVENT_READY = 'ready';\n  var EVENT_RESIZE = 'resize';\n  var EVENT_WHEEL = 'wheel';\n  var EVENT_ZOOM = 'zoom'; // Mime types\n\n  var MIME_TYPE_JPEG = 'image/jpeg'; // RegExps\n\n  var REGEXP_ACTIONS = /^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/;\n  var REGEXP_DATA_URL = /^data:/;\n  var REGEXP_DATA_URL_JPEG = /^data:image\\/jpeg;base64,/;\n  var REGEXP_TAG_NAME = /^img|canvas$/i; // Misc\n  // Inspired by the default width and height of a canvas element.\n\n  var MIN_CONTAINER_WIDTH = 200;\n  var MIN_CONTAINER_HEIGHT = 100;\n\n  var DEFAULTS = {\n    // Define the view mode of the cropper\n    viewMode: 0,\n    // 0, 1, 2, 3\n    // Define the dragging mode of the cropper\n    dragMode: DRAG_MODE_CROP,\n    // 'crop', 'move' or 'none'\n    // Define the initial aspect ratio of the crop box\n    initialAspectRatio: NaN,\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n    // An object with the previous cropping result data\n    data: null,\n    // A selector for adding extra containers to preview\n    preview: '',\n    // Re-render the cropper when resize the window\n    responsive: true,\n    // Restore the cropped area after resize the window\n    restore: true,\n    // Check if the current image is a cross-origin image\n    checkCrossOrigin: true,\n    // Check the current image's Exif Orientation information\n    checkOrientation: true,\n    // Show the black modal\n    modal: true,\n    // Show the dashed lines for guiding\n    guides: true,\n    // Show the center indicator for guiding\n    center: true,\n    // Show the white modal to highlight the crop box\n    highlight: true,\n    // Show the grid background\n    background: true,\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n    // Enable to move the image\n    movable: true,\n    // Enable to rotate the image\n    rotatable: true,\n    // Enable to scale the image\n    scalable: true,\n    // Enable to zoom the image\n    zoomable: true,\n    // Enable to zoom the image by dragging touch\n    zoomOnTouch: true,\n    // Enable to zoom the image by wheeling mouse\n    zoomOnWheel: true,\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n    // Enable to move the crop box\n    cropBoxMovable: true,\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n    toggleDragModeOnDblclick: true,\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: 200,\n    minContainerHeight: 100,\n    // Shortcuts of events\n    ready: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n  };\n\n  var TEMPLATE = '<div class=\"cropper-container\" touch-action=\"none\">' + '<div class=\"cropper-wrap-box\">' + '<div class=\"cropper-canvas\"></div>' + '</div>' + '<div class=\"cropper-drag-box\"></div>' + '<div class=\"cropper-crop-box\">' + '<span class=\"cropper-view-box\"></span>' + '<span class=\"cropper-dashed dashed-h\"></span>' + '<span class=\"cropper-dashed dashed-v\"></span>' + '<span class=\"cropper-center\"></span>' + '<span class=\"cropper-face\"></span>' + '<span class=\"cropper-line line-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-line line-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-line line-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-line line-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-point point-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-point point-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-point point-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-ne\" data-cropper-action=\"ne\"></span>' + '<span class=\"cropper-point point-nw\" data-cropper-action=\"nw\"></span>' + '<span class=\"cropper-point point-sw\" data-cropper-action=\"sw\"></span>' + '<span class=\"cropper-point point-se\" data-cropper-action=\"se\"></span>' + '</div>' + '</div>';\n\n  /**\n   * Check if the given value is not a number.\n   */\n\n  var isNaN = Number.isNaN || WINDOW.isNaN;\n  /**\n   * Check if the given value is a number.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a number, else `false`.\n   */\n\n  function isNumber(value) {\n    return typeof value === 'number' && !isNaN(value);\n  }\n  /**\n   * Check if the given value is a positive number.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a positive number, else `false`.\n   */\n\n  var isPositiveNumber = function isPositiveNumber(value) {\n    return value > 0 && value < Infinity;\n  };\n  /**\n   * Check if the given value is undefined.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is undefined, else `false`.\n   */\n\n  function isUndefined(value) {\n    return typeof value === 'undefined';\n  }\n  /**\n   * Check if the given value is an object.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is an object, else `false`.\n   */\n\n  function isObject(value) {\n    return _typeof(value) === 'object' && value !== null;\n  }\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  /**\n   * Check if the given value is a plain object.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.\n   */\n\n  function isPlainObject(value) {\n    if (!isObject(value)) {\n      return false;\n    }\n\n    try {\n      var _constructor = value.constructor;\n      var prototype = _constructor.prototype;\n      return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\n   * Check if the given value is a function.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a function, else `false`.\n   */\n\n  function isFunction(value) {\n    return typeof value === 'function';\n  }\n  var slice = Array.prototype.slice;\n  /**\n   * Convert array-like or iterable object to an array.\n   * @param {*} value - The value to convert.\n   * @returns {Array} Returns a new array.\n   */\n\n  function toArray(value) {\n    return Array.from ? Array.from(value) : slice.call(value);\n  }\n  /**\n   * Iterate the given data.\n   * @param {*} data - The data to iterate.\n   * @param {Function} callback - The process function for each element.\n   * @returns {*} The original data.\n   */\n\n  function forEach(data, callback) {\n    if (data && isFunction(callback)) {\n      if (Array.isArray(data) || isNumber(data.length)\n      /* array-like */\n      ) {\n          toArray(data).forEach(function (value, key) {\n            callback.call(data, value, key, data);\n          });\n        } else if (isObject(data)) {\n        Object.keys(data).forEach(function (key) {\n          callback.call(data, data[key], key, data);\n        });\n      }\n    }\n\n    return data;\n  }\n  /**\n   * Extend the given object.\n   * @param {*} target - The target object to extend.\n   * @param {*} args - The rest objects for merging to the target object.\n   * @returns {Object} The extended object.\n   */\n\n  var assign = Object.assign || function assign(target) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (isObject(target) && args.length > 0) {\n      args.forEach(function (arg) {\n        if (isObject(arg)) {\n          Object.keys(arg).forEach(function (key) {\n            target[key] = arg[key];\n          });\n        }\n      });\n    }\n\n    return target;\n  };\n  var REGEXP_DECIMALS = /\\.\\d*(?:0|9){12}\\d*$/;\n  /**\n   * Normalize decimal number.\n   * Check out {@link http://0.30000000000000004.com/}\n   * @param {number} value - The value to normalize.\n   * @param {number} [times=100000000000] - The times for normalizing.\n   * @returns {number} Returns the normalized number.\n   */\n\n  function normalizeDecimalNumber(value) {\n    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;\n    return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;\n  }\n  var REGEXP_SUFFIX = /^width|height|left|top|marginLeft|marginTop$/;\n  /**\n   * Apply styles to the given element.\n   * @param {Element} element - The target element.\n   * @param {Object} styles - The styles for applying.\n   */\n\n  function setStyle(element, styles) {\n    var style = element.style;\n    forEach(styles, function (value, property) {\n      if (REGEXP_SUFFIX.test(property) && isNumber(value)) {\n        value = \"\".concat(value, \"px\");\n      }\n\n      style[property] = value;\n    });\n  }\n  /**\n   * Check if the given element has a special class.\n   * @param {Element} element - The element to check.\n   * @param {string} value - The class to search.\n   * @returns {boolean} Returns `true` if the special class was found.\n   */\n\n  function hasClass(element, value) {\n    return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;\n  }\n  /**\n   * Add classes to the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be added.\n   */\n\n  function addClass(element, value) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        addClass(elem, value);\n      });\n      return;\n    }\n\n    if (element.classList) {\n      element.classList.add(value);\n      return;\n    }\n\n    var className = element.className.trim();\n\n    if (!className) {\n      element.className = value;\n    } else if (className.indexOf(value) < 0) {\n      element.className = \"\".concat(className, \" \").concat(value);\n    }\n  }\n  /**\n   * Remove classes from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be removed.\n   */\n\n  function removeClass(element, value) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        removeClass(elem, value);\n      });\n      return;\n    }\n\n    if (element.classList) {\n      element.classList.remove(value);\n      return;\n    }\n\n    if (element.className.indexOf(value) >= 0) {\n      element.className = element.className.replace(value, '');\n    }\n  }\n  /**\n   * Add or remove classes from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be toggled.\n   * @param {boolean} added - Add only.\n   */\n\n  function toggleClass(element, value, added) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        toggleClass(elem, value, added);\n      });\n      return;\n    } // IE10-11 doesn't support the second parameter of `classList.toggle`\n\n\n    if (added) {\n      addClass(element, value);\n    } else {\n      removeClass(element, value);\n    }\n  }\n  var REGEXP_CAMEL_CASE = /([a-z\\d])([A-Z])/g;\n  /**\n   * Transform the given string from camelCase to kebab-case\n   * @param {string} value - The value to transform.\n   * @returns {string} The transformed value.\n   */\n\n  function toParamCase(value) {\n    return value.replace(REGEXP_CAMEL_CASE, '$1-$2').toLowerCase();\n  }\n  /**\n   * Get data from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to get.\n   * @returns {string} The data value.\n   */\n\n  function getData(element, name) {\n    if (isObject(element[name])) {\n      return element[name];\n    }\n\n    if (element.dataset) {\n      return element.dataset[name];\n    }\n\n    return element.getAttribute(\"data-\".concat(toParamCase(name)));\n  }\n  /**\n   * Set data to the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to set.\n   * @param {string} data - The data value.\n   */\n\n  function setData(element, name, data) {\n    if (isObject(data)) {\n      element[name] = data;\n    } else if (element.dataset) {\n      element.dataset[name] = data;\n    } else {\n      element.setAttribute(\"data-\".concat(toParamCase(name)), data);\n    }\n  }\n  /**\n   * Remove data from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to remove.\n   */\n\n  function removeData(element, name) {\n    if (isObject(element[name])) {\n      try {\n        delete element[name];\n      } catch (error) {\n        element[name] = undefined;\n      }\n    } else if (element.dataset) {\n      // #128 Safari not allows to delete dataset property\n      try {\n        delete element.dataset[name];\n      } catch (error) {\n        element.dataset[name] = undefined;\n      }\n    } else {\n      element.removeAttribute(\"data-\".concat(toParamCase(name)));\n    }\n  }\n  var REGEXP_SPACES = /\\s\\s*/;\n\n  var onceSupported = function () {\n    var supported = false;\n\n    if (IS_BROWSER) {\n      var once = false;\n\n      var listener = function listener() {};\n\n      var options = Object.defineProperty({}, 'once', {\n        get: function get() {\n          supported = true;\n          return once;\n        },\n\n        /**\n         * This setter can fix a `TypeError` in strict mode\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}\n         * @param {boolean} value - The value to set\n         */\n        set: function set(value) {\n          once = value;\n        }\n      });\n      WINDOW.addEventListener('test', listener, options);\n      WINDOW.removeEventListener('test', listener, options);\n    }\n\n    return supported;\n  }();\n  /**\n   * Remove event listener from the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Function} listener - The event listener.\n   * @param {Object} options - The event options.\n   */\n\n\n  function removeListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var handler = listener;\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\n      if (!onceSupported) {\n        var listeners = element.listeners;\n\n        if (listeners && listeners[event] && listeners[event][listener]) {\n          handler = listeners[event][listener];\n          delete listeners[event][listener];\n\n          if (Object.keys(listeners[event]).length === 0) {\n            delete listeners[event];\n          }\n\n          if (Object.keys(listeners).length === 0) {\n            delete element.listeners;\n          }\n        }\n      }\n\n      element.removeEventListener(event, handler, options);\n    });\n  }\n  /**\n   * Add event listener to the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Function} listener - The event listener.\n   * @param {Object} options - The event options.\n   */\n\n  function addListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var _handler = listener;\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\n      if (options.once && !onceSupported) {\n        var _element$listeners = element.listeners,\n            listeners = _element$listeners === void 0 ? {} : _element$listeners;\n\n        _handler = function handler() {\n          delete listeners[event][listener];\n          element.removeEventListener(event, _handler, options);\n\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          listener.apply(element, args);\n        };\n\n        if (!listeners[event]) {\n          listeners[event] = {};\n        }\n\n        if (listeners[event][listener]) {\n          element.removeEventListener(event, listeners[event][listener], options);\n        }\n\n        listeners[event][listener] = _handler;\n        element.listeners = listeners;\n      }\n\n      element.addEventListener(event, _handler, options);\n    });\n  }\n  /**\n   * Dispatch event on the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Object} data - The additional event data.\n   * @returns {boolean} Indicate if the event is default prevented or not.\n   */\n\n  function dispatchEvent(element, type, data) {\n    var event; // Event and CustomEvent on IE9-11 are global objects, not constructors\n\n    if (isFunction(Event) && isFunction(CustomEvent)) {\n      event = new CustomEvent(type, {\n        detail: data,\n        bubbles: true,\n        cancelable: true\n      });\n    } else {\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent(type, true, true, data);\n    }\n\n    return element.dispatchEvent(event);\n  }\n  /**\n   * Get the offset base on the document.\n   * @param {Element} element - The target element.\n   * @returns {Object} The offset data.\n   */\n\n  function getOffset(element) {\n    var box = element.getBoundingClientRect();\n    return {\n      left: box.left + (window.pageXOffset - document.documentElement.clientLeft),\n      top: box.top + (window.pageYOffset - document.documentElement.clientTop)\n    };\n  }\n  var location = WINDOW.location;\n  var REGEXP_ORIGINS = /^(\\w+:)\\/\\/([^:/?#]*):?(\\d*)/i;\n  /**\n   * Check if the given URL is a cross origin URL.\n   * @param {string} url - The target URL.\n   * @returns {boolean} Returns `true` if the given URL is a cross origin URL, else `false`.\n   */\n\n  function isCrossOriginURL(url) {\n    var parts = url.match(REGEXP_ORIGINS);\n    return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n  }\n  /**\n   * Add timestamp to the given URL.\n   * @param {string} url - The target URL.\n   * @returns {string} The result URL.\n   */\n\n  function addTimestamp(url) {\n    var timestamp = \"timestamp=\".concat(new Date().getTime());\n    return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;\n  }\n  /**\n   * Get transforms base on the given object.\n   * @param {Object} obj - The target object.\n   * @returns {string} A string contains transform values.\n   */\n\n  function getTransforms(_ref) {\n    var rotate = _ref.rotate,\n        scaleX = _ref.scaleX,\n        scaleY = _ref.scaleY,\n        translateX = _ref.translateX,\n        translateY = _ref.translateY;\n    var values = [];\n\n    if (isNumber(translateX) && translateX !== 0) {\n      values.push(\"translateX(\".concat(translateX, \"px)\"));\n    }\n\n    if (isNumber(translateY) && translateY !== 0) {\n      values.push(\"translateY(\".concat(translateY, \"px)\"));\n    } // Rotate should come first before scale to match orientation transform\n\n\n    if (isNumber(rotate) && rotate !== 0) {\n      values.push(\"rotate(\".concat(rotate, \"deg)\"));\n    }\n\n    if (isNumber(scaleX) && scaleX !== 1) {\n      values.push(\"scaleX(\".concat(scaleX, \")\"));\n    }\n\n    if (isNumber(scaleY) && scaleY !== 1) {\n      values.push(\"scaleY(\".concat(scaleY, \")\"));\n    }\n\n    var transform = values.length ? values.join(' ') : 'none';\n    return {\n      WebkitTransform: transform,\n      msTransform: transform,\n      transform: transform\n    };\n  }\n  /**\n   * Get the max ratio of a group of pointers.\n   * @param {string} pointers - The target pointers.\n   * @returns {number} The result ratio.\n   */\n\n  function getMaxZoomRatio(pointers) {\n    var pointers2 = _objectSpread2({}, pointers);\n\n    var ratios = [];\n    forEach(pointers, function (pointer, pointerId) {\n      delete pointers2[pointerId];\n      forEach(pointers2, function (pointer2) {\n        var x1 = Math.abs(pointer.startX - pointer2.startX);\n        var y1 = Math.abs(pointer.startY - pointer2.startY);\n        var x2 = Math.abs(pointer.endX - pointer2.endX);\n        var y2 = Math.abs(pointer.endY - pointer2.endY);\n        var z1 = Math.sqrt(x1 * x1 + y1 * y1);\n        var z2 = Math.sqrt(x2 * x2 + y2 * y2);\n        var ratio = (z2 - z1) / z1;\n        ratios.push(ratio);\n      });\n    });\n    ratios.sort(function (a, b) {\n      return Math.abs(a) < Math.abs(b);\n    });\n    return ratios[0];\n  }\n  /**\n   * Get a pointer from an event object.\n   * @param {Object} event - The target event object.\n   * @param {boolean} endOnly - Indicates if only returns the end point coordinate or not.\n   * @returns {Object} The result pointer contains start and/or end point coordinates.\n   */\n\n  function getPointer(_ref2, endOnly) {\n    var pageX = _ref2.pageX,\n        pageY = _ref2.pageY;\n    var end = {\n      endX: pageX,\n      endY: pageY\n    };\n    return endOnly ? end : _objectSpread2({\n      startX: pageX,\n      startY: pageY\n    }, end);\n  }\n  /**\n   * Get the center point coordinate of a group of pointers.\n   * @param {Object} pointers - The target pointers.\n   * @returns {Object} The center point coordinate.\n   */\n\n  function getPointersCenter(pointers) {\n    var pageX = 0;\n    var pageY = 0;\n    var count = 0;\n    forEach(pointers, function (_ref3) {\n      var startX = _ref3.startX,\n          startY = _ref3.startY;\n      pageX += startX;\n      pageY += startY;\n      count += 1;\n    });\n    pageX /= count;\n    pageY /= count;\n    return {\n      pageX: pageX,\n      pageY: pageY\n    };\n  }\n  /**\n   * Get the max sizes in a rectangle under the given aspect ratio.\n   * @param {Object} data - The original sizes.\n   * @param {string} [type='contain'] - The adjust type.\n   * @returns {Object} The result sizes.\n   */\n\n  function getAdjustedSizes(_ref4) // or 'cover'\n  {\n    var aspectRatio = _ref4.aspectRatio,\n        height = _ref4.height,\n        width = _ref4.width;\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'contain';\n    var isValidWidth = isPositiveNumber(width);\n    var isValidHeight = isPositiveNumber(height);\n\n    if (isValidWidth && isValidHeight) {\n      var adjustedWidth = height * aspectRatio;\n\n      if (type === 'contain' && adjustedWidth > width || type === 'cover' && adjustedWidth < width) {\n        height = width / aspectRatio;\n      } else {\n        width = height * aspectRatio;\n      }\n    } else if (isValidWidth) {\n      height = width / aspectRatio;\n    } else if (isValidHeight) {\n      width = height * aspectRatio;\n    }\n\n    return {\n      width: width,\n      height: height\n    };\n  }\n  /**\n   * Get the new sizes of a rectangle after rotated.\n   * @param {Object} data - The original sizes.\n   * @returns {Object} The result sizes.\n   */\n\n  function getRotatedSizes(_ref5) {\n    var width = _ref5.width,\n        height = _ref5.height,\n        degree = _ref5.degree;\n    degree = Math.abs(degree) % 180;\n\n    if (degree === 90) {\n      return {\n        width: height,\n        height: width\n      };\n    }\n\n    var arc = degree % 90 * Math.PI / 180;\n    var sinArc = Math.sin(arc);\n    var cosArc = Math.cos(arc);\n    var newWidth = width * cosArc + height * sinArc;\n    var newHeight = width * sinArc + height * cosArc;\n    return degree > 90 ? {\n      width: newHeight,\n      height: newWidth\n    } : {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n  /**\n   * Get a canvas which drew the given image.\n   * @param {HTMLImageElement} image - The image for drawing.\n   * @param {Object} imageData - The image data.\n   * @param {Object} canvasData - The canvas data.\n   * @param {Object} options - The options.\n   * @returns {HTMLCanvasElement} The result canvas.\n   */\n\n  function getSourceCanvas(image, _ref6, _ref7, _ref8) {\n    var imageAspectRatio = _ref6.aspectRatio,\n        imageNaturalWidth = _ref6.naturalWidth,\n        imageNaturalHeight = _ref6.naturalHeight,\n        _ref6$rotate = _ref6.rotate,\n        rotate = _ref6$rotate === void 0 ? 0 : _ref6$rotate,\n        _ref6$scaleX = _ref6.scaleX,\n        scaleX = _ref6$scaleX === void 0 ? 1 : _ref6$scaleX,\n        _ref6$scaleY = _ref6.scaleY,\n        scaleY = _ref6$scaleY === void 0 ? 1 : _ref6$scaleY;\n    var aspectRatio = _ref7.aspectRatio,\n        naturalWidth = _ref7.naturalWidth,\n        naturalHeight = _ref7.naturalHeight;\n    var _ref8$fillColor = _ref8.fillColor,\n        fillColor = _ref8$fillColor === void 0 ? 'transparent' : _ref8$fillColor,\n        _ref8$imageSmoothingE = _ref8.imageSmoothingEnabled,\n        imageSmoothingEnabled = _ref8$imageSmoothingE === void 0 ? true : _ref8$imageSmoothingE,\n        _ref8$imageSmoothingQ = _ref8.imageSmoothingQuality,\n        imageSmoothingQuality = _ref8$imageSmoothingQ === void 0 ? 'low' : _ref8$imageSmoothingQ,\n        _ref8$maxWidth = _ref8.maxWidth,\n        maxWidth = _ref8$maxWidth === void 0 ? Infinity : _ref8$maxWidth,\n        _ref8$maxHeight = _ref8.maxHeight,\n        maxHeight = _ref8$maxHeight === void 0 ? Infinity : _ref8$maxHeight,\n        _ref8$minWidth = _ref8.minWidth,\n        minWidth = _ref8$minWidth === void 0 ? 0 : _ref8$minWidth,\n        _ref8$minHeight = _ref8.minHeight,\n        minHeight = _ref8$minHeight === void 0 ? 0 : _ref8$minHeight;\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    var maxSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: maxWidth,\n      height: maxHeight\n    });\n    var minSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: minWidth,\n      height: minHeight\n    }, 'cover');\n    var width = Math.min(maxSizes.width, Math.max(minSizes.width, naturalWidth));\n    var height = Math.min(maxSizes.height, Math.max(minSizes.height, naturalHeight)); // Note: should always use image's natural sizes for drawing as\n    // imageData.naturalWidth === canvasData.naturalHeight when rotate % 180 === 90\n\n    var destMaxSizes = getAdjustedSizes({\n      aspectRatio: imageAspectRatio,\n      width: maxWidth,\n      height: maxHeight\n    });\n    var destMinSizes = getAdjustedSizes({\n      aspectRatio: imageAspectRatio,\n      width: minWidth,\n      height: minHeight\n    }, 'cover');\n    var destWidth = Math.min(destMaxSizes.width, Math.max(destMinSizes.width, imageNaturalWidth));\n    var destHeight = Math.min(destMaxSizes.height, Math.max(destMinSizes.height, imageNaturalHeight));\n    var params = [-destWidth / 2, -destHeight / 2, destWidth, destHeight];\n    canvas.width = normalizeDecimalNumber(width);\n    canvas.height = normalizeDecimalNumber(height);\n    context.fillStyle = fillColor;\n    context.fillRect(0, 0, width, height);\n    context.save();\n    context.translate(width / 2, height / 2);\n    context.rotate(rotate * Math.PI / 180);\n    context.scale(scaleX, scaleY);\n    context.imageSmoothingEnabled = imageSmoothingEnabled;\n    context.imageSmoothingQuality = imageSmoothingQuality;\n    context.drawImage.apply(context, [image].concat(_toConsumableArray(params.map(function (param) {\n      return Math.floor(normalizeDecimalNumber(param));\n    }))));\n    context.restore();\n    return canvas;\n  }\n  var fromCharCode = String.fromCharCode;\n  /**\n   * Get string from char code in data view.\n   * @param {DataView} dataView - The data view for read.\n   * @param {number} start - The start index.\n   * @param {number} length - The read length.\n   * @returns {string} The read result.\n   */\n\n  function getStringFromCharCode(dataView, start, length) {\n    var str = '';\n    length += start;\n\n    for (var i = start; i < length; i += 1) {\n      str += fromCharCode(dataView.getUint8(i));\n    }\n\n    return str;\n  }\n  var REGEXP_DATA_URL_HEAD = /^data:.*,/;\n  /**\n   * Transform Data URL to array buffer.\n   * @param {string} dataURL - The Data URL to transform.\n   * @returns {ArrayBuffer} The result array buffer.\n   */\n\n  function dataURLToArrayBuffer(dataURL) {\n    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n    var binary = atob(base64);\n    var arrayBuffer = new ArrayBuffer(binary.length);\n    var uint8 = new Uint8Array(arrayBuffer);\n    forEach(uint8, function (value, i) {\n      uint8[i] = binary.charCodeAt(i);\n    });\n    return arrayBuffer;\n  }\n  /**\n   * Transform array buffer to Data URL.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.\n   * @param {string} mimeType - The mime type of the Data URL.\n   * @returns {string} The result Data URL.\n   */\n\n  function arrayBufferToDataURL(arrayBuffer, mimeType) {\n    var chunks = []; // Chunk Typed Array for better performance (#435)\n\n    var chunkSize = 8192;\n    var uint8 = new Uint8Array(arrayBuffer);\n\n    while (uint8.length > 0) {\n      // XXX: Babel's `toConsumableArray` helper will throw error in IE or Safari 9\n      // eslint-disable-next-line prefer-spread\n      chunks.push(fromCharCode.apply(null, toArray(uint8.subarray(0, chunkSize))));\n      uint8 = uint8.subarray(chunkSize);\n    }\n\n    return \"data:\".concat(mimeType, \";base64,\").concat(btoa(chunks.join('')));\n  }\n  /**\n   * Get orientation value from given array buffer.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to read.\n   * @returns {number} The read orientation value.\n   */\n\n  function resetAndGetOrientation(arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n    var orientation; // Ignores range error when the image does not have correct Exif information\n\n    try {\n      var littleEndian;\n      var app1Start;\n      var ifdStart; // Only handle JPEG image (start by 0xFFD8)\n\n      if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n        var length = dataView.byteLength;\n        var offset = 2;\n\n        while (offset + 1 < length) {\n          if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n            app1Start = offset;\n            break;\n          }\n\n          offset += 1;\n        }\n      }\n\n      if (app1Start) {\n        var exifIDCode = app1Start + 4;\n        var tiffOffset = app1Start + 10;\n\n        if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n          var endianness = dataView.getUint16(tiffOffset);\n          littleEndian = endianness === 0x4949;\n\n          if (littleEndian || endianness === 0x4D4D\n          /* bigEndian */\n          ) {\n              if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n                var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n                if (firstIFDOffset >= 0x00000008) {\n                  ifdStart = tiffOffset + firstIFDOffset;\n                }\n              }\n            }\n        }\n      }\n\n      if (ifdStart) {\n        var _length = dataView.getUint16(ifdStart, littleEndian);\n\n        var _offset;\n\n        var i;\n\n        for (i = 0; i < _length; i += 1) {\n          _offset = ifdStart + i * 12 + 2;\n\n          if (dataView.getUint16(_offset, littleEndian) === 0x0112\n          /* Orientation */\n          ) {\n              // 8 is the offset of the current tag's value\n              _offset += 8; // Get the original orientation value\n\n              orientation = dataView.getUint16(_offset, littleEndian); // Override the orientation with its default value\n\n              dataView.setUint16(_offset, 1, littleEndian);\n              break;\n            }\n        }\n      }\n    } catch (error) {\n      orientation = 1;\n    }\n\n    return orientation;\n  }\n  /**\n   * Parse Exif Orientation value.\n   * @param {number} orientation - The orientation to parse.\n   * @returns {Object} The parsed result.\n   */\n\n  function parseOrientation(orientation) {\n    var rotate = 0;\n    var scaleX = 1;\n    var scaleY = 1;\n\n    switch (orientation) {\n      // Flip horizontal\n      case 2:\n        scaleX = -1;\n        break;\n      // Rotate left 180°\n\n      case 3:\n        rotate = -180;\n        break;\n      // Flip vertical\n\n      case 4:\n        scaleY = -1;\n        break;\n      // Flip vertical and rotate right 90°\n\n      case 5:\n        rotate = 90;\n        scaleY = -1;\n        break;\n      // Rotate right 90°\n\n      case 6:\n        rotate = 90;\n        break;\n      // Flip horizontal and rotate right 90°\n\n      case 7:\n        rotate = 90;\n        scaleX = -1;\n        break;\n      // Rotate left 90°\n\n      case 8:\n        rotate = -90;\n        break;\n\n      default:\n    }\n\n    return {\n      rotate: rotate,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n\n  var render = {\n    render: function render() {\n      this.initContainer();\n      this.initCanvas();\n      this.initCropBox();\n      this.renderCanvas();\n\n      if (this.cropped) {\n        this.renderCropBox();\n      }\n    },\n    initContainer: function initContainer() {\n      var element = this.element,\n          options = this.options,\n          container = this.container,\n          cropper = this.cropper;\n      addClass(cropper, CLASS_HIDDEN);\n      removeClass(element, CLASS_HIDDEN);\n      var containerData = {\n        width: Math.max(container.offsetWidth, Number(options.minContainerWidth) || 200),\n        height: Math.max(container.offsetHeight, Number(options.minContainerHeight) || 100)\n      };\n      this.containerData = containerData;\n      setStyle(cropper, {\n        width: containerData.width,\n        height: containerData.height\n      });\n      addClass(element, CLASS_HIDDEN);\n      removeClass(cropper, CLASS_HIDDEN);\n    },\n    // Canvas (image wrapper)\n    initCanvas: function initCanvas() {\n      var containerData = this.containerData,\n          imageData = this.imageData;\n      var viewMode = this.options.viewMode;\n      var rotated = Math.abs(imageData.rotate) % 180 === 90;\n      var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\n      var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\n      var aspectRatio = naturalWidth / naturalHeight;\n      var canvasWidth = containerData.width;\n      var canvasHeight = containerData.height;\n\n      if (containerData.height * aspectRatio > containerData.width) {\n        if (viewMode === 3) {\n          canvasWidth = containerData.height * aspectRatio;\n        } else {\n          canvasHeight = containerData.width / aspectRatio;\n        }\n      } else if (viewMode === 3) {\n        canvasHeight = containerData.width / aspectRatio;\n      } else {\n        canvasWidth = containerData.height * aspectRatio;\n      }\n\n      var canvasData = {\n        aspectRatio: aspectRatio,\n        naturalWidth: naturalWidth,\n        naturalHeight: naturalHeight,\n        width: canvasWidth,\n        height: canvasHeight\n      };\n      canvasData.left = (containerData.width - canvasWidth) / 2;\n      canvasData.top = (containerData.height - canvasHeight) / 2;\n      canvasData.oldLeft = canvasData.left;\n      canvasData.oldTop = canvasData.top;\n      this.canvasData = canvasData;\n      this.limited = viewMode === 1 || viewMode === 2;\n      this.limitCanvas(true, true);\n      this.initialImageData = assign({}, imageData);\n      this.initialCanvasData = assign({}, canvasData);\n    },\n    limitCanvas: function limitCanvas(sizeLimited, positionLimited) {\n      var options = this.options,\n          containerData = this.containerData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var viewMode = options.viewMode;\n      var aspectRatio = canvasData.aspectRatio;\n      var cropped = this.cropped && cropBoxData;\n\n      if (sizeLimited) {\n        var minCanvasWidth = Number(options.minCanvasWidth) || 0;\n        var minCanvasHeight = Number(options.minCanvasHeight) || 0;\n\n        if (viewMode > 1) {\n          minCanvasWidth = Math.max(minCanvasWidth, containerData.width);\n          minCanvasHeight = Math.max(minCanvasHeight, containerData.height);\n\n          if (viewMode === 3) {\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        } else if (viewMode > 0) {\n          if (minCanvasWidth) {\n            minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);\n          } else if (minCanvasHeight) {\n            minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);\n          } else if (cropped) {\n            minCanvasWidth = cropBoxData.width;\n            minCanvasHeight = cropBoxData.height;\n\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        }\n\n        var _getAdjustedSizes = getAdjustedSizes({\n          aspectRatio: aspectRatio,\n          width: minCanvasWidth,\n          height: minCanvasHeight\n        });\n\n        minCanvasWidth = _getAdjustedSizes.width;\n        minCanvasHeight = _getAdjustedSizes.height;\n        canvasData.minWidth = minCanvasWidth;\n        canvasData.minHeight = minCanvasHeight;\n        canvasData.maxWidth = Infinity;\n        canvasData.maxHeight = Infinity;\n      }\n\n      if (positionLimited) {\n        if (viewMode > (cropped ? 0 : 1)) {\n          var newCanvasLeft = containerData.width - canvasData.width;\n          var newCanvasTop = containerData.height - canvasData.height;\n          canvasData.minLeft = Math.min(0, newCanvasLeft);\n          canvasData.minTop = Math.min(0, newCanvasTop);\n          canvasData.maxLeft = Math.max(0, newCanvasLeft);\n          canvasData.maxTop = Math.max(0, newCanvasTop);\n\n          if (cropped && this.limited) {\n            canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));\n            canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));\n            canvasData.maxLeft = cropBoxData.left;\n            canvasData.maxTop = cropBoxData.top;\n\n            if (viewMode === 2) {\n              if (canvasData.width >= containerData.width) {\n                canvasData.minLeft = Math.min(0, newCanvasLeft);\n                canvasData.maxLeft = Math.max(0, newCanvasLeft);\n              }\n\n              if (canvasData.height >= containerData.height) {\n                canvasData.minTop = Math.min(0, newCanvasTop);\n                canvasData.maxTop = Math.max(0, newCanvasTop);\n              }\n            }\n          }\n        } else {\n          canvasData.minLeft = -canvasData.width;\n          canvasData.minTop = -canvasData.height;\n          canvasData.maxLeft = containerData.width;\n          canvasData.maxTop = containerData.height;\n        }\n      }\n    },\n    renderCanvas: function renderCanvas(changed, transformed) {\n      var canvasData = this.canvasData,\n          imageData = this.imageData;\n\n      if (transformed) {\n        var _getRotatedSizes = getRotatedSizes({\n          width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),\n          height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),\n          degree: imageData.rotate || 0\n        }),\n            naturalWidth = _getRotatedSizes.width,\n            naturalHeight = _getRotatedSizes.height;\n\n        var width = canvasData.width * (naturalWidth / canvasData.naturalWidth);\n        var height = canvasData.height * (naturalHeight / canvasData.naturalHeight);\n        canvasData.left -= (width - canvasData.width) / 2;\n        canvasData.top -= (height - canvasData.height) / 2;\n        canvasData.width = width;\n        canvasData.height = height;\n        canvasData.aspectRatio = naturalWidth / naturalHeight;\n        canvasData.naturalWidth = naturalWidth;\n        canvasData.naturalHeight = naturalHeight;\n        this.limitCanvas(true, false);\n      }\n\n      if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n        canvasData.left = canvasData.oldLeft;\n      }\n\n      if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n        canvasData.top = canvasData.oldTop;\n      }\n\n      canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n      canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n      this.limitCanvas(false, true);\n      canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\n      canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);\n      canvasData.oldLeft = canvasData.left;\n      canvasData.oldTop = canvasData.top;\n      setStyle(this.canvas, assign({\n        width: canvasData.width,\n        height: canvasData.height\n      }, getTransforms({\n        translateX: canvasData.left,\n        translateY: canvasData.top\n      })));\n      this.renderImage(changed);\n\n      if (this.cropped && this.limited) {\n        this.limitCropBox(true, true);\n      }\n    },\n    renderImage: function renderImage(changed) {\n      var canvasData = this.canvasData,\n          imageData = this.imageData;\n      var width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);\n      var height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);\n      assign(imageData, {\n        width: width,\n        height: height,\n        left: (canvasData.width - width) / 2,\n        top: (canvasData.height - height) / 2\n      });\n      setStyle(this.image, assign({\n        width: imageData.width,\n        height: imageData.height\n      }, getTransforms(assign({\n        translateX: imageData.left,\n        translateY: imageData.top\n      }, imageData))));\n\n      if (changed) {\n        this.output();\n      }\n    },\n    initCropBox: function initCropBox() {\n      var options = this.options,\n          canvasData = this.canvasData;\n      var aspectRatio = options.aspectRatio || options.initialAspectRatio;\n      var autoCropArea = Number(options.autoCropArea) || 0.8;\n      var cropBoxData = {\n        width: canvasData.width,\n        height: canvasData.height\n      };\n\n      if (aspectRatio) {\n        if (canvasData.height * aspectRatio > canvasData.width) {\n          cropBoxData.height = cropBoxData.width / aspectRatio;\n        } else {\n          cropBoxData.width = cropBoxData.height * aspectRatio;\n        }\n      }\n\n      this.cropBoxData = cropBoxData;\n      this.limitCropBox(true, true); // Initialize auto crop area\n\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight); // The width/height of auto crop area must large than \"minWidth/Height\"\n\n      cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\n      cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\n      cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n      cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n      cropBoxData.oldLeft = cropBoxData.left;\n      cropBoxData.oldTop = cropBoxData.top;\n      this.initialCropBoxData = assign({}, cropBoxData);\n    },\n    limitCropBox: function limitCropBox(sizeLimited, positionLimited) {\n      var options = this.options,\n          containerData = this.containerData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData,\n          limited = this.limited;\n      var aspectRatio = options.aspectRatio;\n\n      if (sizeLimited) {\n        var minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\n        var minCropBoxHeight = Number(options.minCropBoxHeight) || 0;\n        var maxCropBoxWidth = limited ? Math.min(containerData.width, canvasData.width, canvasData.width + canvasData.left, containerData.width - canvasData.left) : containerData.width;\n        var maxCropBoxHeight = limited ? Math.min(containerData.height, canvasData.height, canvasData.height + canvasData.top, containerData.height - canvasData.top) : containerData.height; // The min/maxCropBoxWidth/Height must be less than container's width/height\n\n        minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);\n        minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);\n\n        if (aspectRatio) {\n          if (minCropBoxWidth && minCropBoxHeight) {\n            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n              minCropBoxHeight = minCropBoxWidth / aspectRatio;\n            } else {\n              minCropBoxWidth = minCropBoxHeight * aspectRatio;\n            }\n          } else if (minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else if (minCropBoxHeight) {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n\n          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n          } else {\n            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n          }\n        } // The minWidth/Height must be less than maxWidth/Height\n\n\n        cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);\n        cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);\n        cropBoxData.maxWidth = maxCropBoxWidth;\n        cropBoxData.maxHeight = maxCropBoxHeight;\n      }\n\n      if (positionLimited) {\n        if (limited) {\n          cropBoxData.minLeft = Math.max(0, canvasData.left);\n          cropBoxData.minTop = Math.max(0, canvasData.top);\n          cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\n          cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\n        } else {\n          cropBoxData.minLeft = 0;\n          cropBoxData.minTop = 0;\n          cropBoxData.maxLeft = containerData.width - cropBoxData.width;\n          cropBoxData.maxTop = containerData.height - cropBoxData.height;\n        }\n      }\n    },\n    renderCropBox: function renderCropBox() {\n      var options = this.options,\n          containerData = this.containerData,\n          cropBoxData = this.cropBoxData;\n\n      if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n        cropBoxData.left = cropBoxData.oldLeft;\n      }\n\n      if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n        cropBoxData.top = cropBoxData.oldTop;\n      }\n\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n      this.limitCropBox(false, true);\n      cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\n      cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\n      cropBoxData.oldLeft = cropBoxData.left;\n      cropBoxData.oldTop = cropBoxData.top;\n\n      if (options.movable && options.cropBoxMovable) {\n        // Turn to move the canvas when the crop box is equal to the container\n        setData(this.face, DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? ACTION_MOVE : ACTION_ALL);\n      }\n\n      setStyle(this.cropBox, assign({\n        width: cropBoxData.width,\n        height: cropBoxData.height\n      }, getTransforms({\n        translateX: cropBoxData.left,\n        translateY: cropBoxData.top\n      })));\n\n      if (this.cropped && this.limited) {\n        this.limitCanvas(true, true);\n      }\n\n      if (!this.disabled) {\n        this.output();\n      }\n    },\n    output: function output() {\n      this.preview();\n      dispatchEvent(this.element, EVENT_CROP, this.getData());\n    }\n  };\n\n  var preview = {\n    initPreview: function initPreview() {\n      var element = this.element,\n          crossOrigin = this.crossOrigin;\n      var preview = this.options.preview;\n      var url = crossOrigin ? this.crossOriginUrl : this.url;\n      var alt = element.alt || 'The image to preview';\n      var image = document.createElement('img');\n\n      if (crossOrigin) {\n        image.crossOrigin = crossOrigin;\n      }\n\n      image.src = url;\n      image.alt = alt;\n      this.viewBox.appendChild(image);\n      this.viewBoxImage = image;\n\n      if (!preview) {\n        return;\n      }\n\n      var previews = preview;\n\n      if (typeof preview === 'string') {\n        previews = element.ownerDocument.querySelectorAll(preview);\n      } else if (preview.querySelector) {\n        previews = [preview];\n      }\n\n      this.previews = previews;\n      forEach(previews, function (el) {\n        var img = document.createElement('img'); // Save the original size for recover\n\n        setData(el, DATA_PREVIEW, {\n          width: el.offsetWidth,\n          height: el.offsetHeight,\n          html: el.innerHTML\n        });\n\n        if (crossOrigin) {\n          img.crossOrigin = crossOrigin;\n        }\n\n        img.src = url;\n        img.alt = alt;\n        /**\n         * Override img element styles\n         * Add `display:block` to avoid margin top issue\n         * Add `height:auto` to override `height` attribute on IE8\n         * (Occur only when margin-top <= -height)\n         */\n\n        img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;\"';\n        el.innerHTML = '';\n        el.appendChild(img);\n      });\n    },\n    resetPreview: function resetPreview() {\n      forEach(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n        setStyle(element, {\n          width: data.width,\n          height: data.height\n        });\n        element.innerHTML = data.html;\n        removeData(element, DATA_PREVIEW);\n      });\n    },\n    preview: function preview() {\n      var imageData = this.imageData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var cropBoxWidth = cropBoxData.width,\n          cropBoxHeight = cropBoxData.height;\n      var width = imageData.width,\n          height = imageData.height;\n      var left = cropBoxData.left - canvasData.left - imageData.left;\n      var top = cropBoxData.top - canvasData.top - imageData.top;\n\n      if (!this.cropped || this.disabled) {\n        return;\n      }\n\n      setStyle(this.viewBoxImage, assign({\n        width: width,\n        height: height\n      }, getTransforms(assign({\n        translateX: -left,\n        translateY: -top\n      }, imageData))));\n      forEach(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n        var originalWidth = data.width;\n        var originalHeight = data.height;\n        var newWidth = originalWidth;\n        var newHeight = originalHeight;\n        var ratio = 1;\n\n        if (cropBoxWidth) {\n          ratio = originalWidth / cropBoxWidth;\n          newHeight = cropBoxHeight * ratio;\n        }\n\n        if (cropBoxHeight && newHeight > originalHeight) {\n          ratio = originalHeight / cropBoxHeight;\n          newWidth = cropBoxWidth * ratio;\n          newHeight = originalHeight;\n        }\n\n        setStyle(element, {\n          width: newWidth,\n          height: newHeight\n        });\n        setStyle(element.getElementsByTagName('img')[0], assign({\n          width: width * ratio,\n          height: height * ratio\n        }, getTransforms(assign({\n          translateX: -left * ratio,\n          translateY: -top * ratio\n        }, imageData))));\n      });\n    }\n  };\n\n  var events = {\n    bind: function bind() {\n      var element = this.element,\n          options = this.options,\n          cropper = this.cropper;\n\n      if (isFunction(options.cropstart)) {\n        addListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        addListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        addListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        addListener(element, EVENT_CROP, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        addListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      addListener(cropper, EVENT_POINTER_DOWN, this.onCropStart = this.cropStart.bind(this));\n\n      if (options.zoomable && options.zoomOnWheel) {\n        addListener(cropper, EVENT_WHEEL, this.onWheel = this.wheel.bind(this), {\n          passive: false,\n          capture: true\n        });\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        addListener(cropper, EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));\n      }\n\n      addListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove = this.cropMove.bind(this));\n      addListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd = this.cropEnd.bind(this));\n\n      if (options.responsive) {\n        addListener(window, EVENT_RESIZE, this.onResize = this.resize.bind(this));\n      }\n    },\n    unbind: function unbind() {\n      var element = this.element,\n          options = this.options,\n          cropper = this.cropper;\n\n      if (isFunction(options.cropstart)) {\n        removeListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        removeListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        removeListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        removeListener(element, EVENT_CROP, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        removeListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      removeListener(cropper, EVENT_POINTER_DOWN, this.onCropStart);\n\n      if (options.zoomable && options.zoomOnWheel) {\n        removeListener(cropper, EVENT_WHEEL, this.onWheel, {\n          passive: false,\n          capture: true\n        });\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        removeListener(cropper, EVENT_DBLCLICK, this.onDblclick);\n      }\n\n      removeListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove);\n      removeListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd);\n\n      if (options.responsive) {\n        removeListener(window, EVENT_RESIZE, this.onResize);\n      }\n    }\n  };\n\n  var handlers = {\n    resize: function resize() {\n      var options = this.options,\n          container = this.container,\n          containerData = this.containerData;\n      var minContainerWidth = Number(options.minContainerWidth) || MIN_CONTAINER_WIDTH;\n      var minContainerHeight = Number(options.minContainerHeight) || MIN_CONTAINER_HEIGHT;\n\n      if (this.disabled || containerData.width <= minContainerWidth || containerData.height <= minContainerHeight) {\n        return;\n      }\n\n      var ratio = container.offsetWidth / containerData.width; // Resize when width changed or height changed\n\n      if (ratio !== 1 || container.offsetHeight !== containerData.height) {\n        var canvasData;\n        var cropBoxData;\n\n        if (options.restore) {\n          canvasData = this.getCanvasData();\n          cropBoxData = this.getCropBoxData();\n        }\n\n        this.render();\n\n        if (options.restore) {\n          this.setCanvasData(forEach(canvasData, function (n, i) {\n            canvasData[i] = n * ratio;\n          }));\n          this.setCropBoxData(forEach(cropBoxData, function (n, i) {\n            cropBoxData[i] = n * ratio;\n          }));\n        }\n      }\n    },\n    dblclick: function dblclick() {\n      if (this.disabled || this.options.dragMode === DRAG_MODE_NONE) {\n        return;\n      }\n\n      this.setDragMode(hasClass(this.dragBox, CLASS_CROP) ? DRAG_MODE_MOVE : DRAG_MODE_CROP);\n    },\n    wheel: function wheel(event) {\n      var _this = this;\n\n      var ratio = Number(this.options.wheelZoomRatio) || 0.1;\n      var delta = 1;\n\n      if (this.disabled) {\n        return;\n      }\n\n      event.preventDefault(); // Limit wheel speed to prevent zoom too fast (#21)\n\n      if (this.wheeling) {\n        return;\n      }\n\n      this.wheeling = true;\n      setTimeout(function () {\n        _this.wheeling = false;\n      }, 50);\n\n      if (event.deltaY) {\n        delta = event.deltaY > 0 ? 1 : -1;\n      } else if (event.wheelDelta) {\n        delta = -event.wheelDelta / 120;\n      } else if (event.detail) {\n        delta = event.detail > 0 ? 1 : -1;\n      }\n\n      this.zoom(-delta * ratio, event);\n    },\n    cropStart: function cropStart(event) {\n      var buttons = event.buttons,\n          button = event.button;\n\n      if (this.disabled // Handle mouse event and pointer event and ignore touch event\n      || (event.type === 'mousedown' || event.type === 'pointerdown' && event.pointerType === 'mouse') && ( // No primary button (Usually the left button)\n      isNumber(buttons) && buttons !== 1 || isNumber(button) && button !== 0 // Open context menu\n      || event.ctrlKey)) {\n        return;\n      }\n\n      var options = this.options,\n          pointers = this.pointers;\n      var action;\n\n      if (event.changedTouches) {\n        // Handle touch event\n        forEach(event.changedTouches, function (touch) {\n          pointers[touch.identifier] = getPointer(touch);\n        });\n      } else {\n        // Handle mouse event and pointer event\n        pointers[event.pointerId || 0] = getPointer(event);\n      }\n\n      if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {\n        action = ACTION_ZOOM;\n      } else {\n        action = getData(event.target, DATA_ACTION);\n      }\n\n      if (!REGEXP_ACTIONS.test(action)) {\n        return;\n      }\n\n      if (dispatchEvent(this.element, EVENT_CROP_START, {\n        originalEvent: event,\n        action: action\n      }) === false) {\n        return;\n      } // This line is required for preventing page zooming in iOS browsers\n\n\n      event.preventDefault();\n      this.action = action;\n      this.cropping = false;\n\n      if (action === ACTION_CROP) {\n        this.cropping = true;\n        addClass(this.dragBox, CLASS_MODAL);\n      }\n    },\n    cropMove: function cropMove(event) {\n      var action = this.action;\n\n      if (this.disabled || !action) {\n        return;\n      }\n\n      var pointers = this.pointers;\n      event.preventDefault();\n\n      if (dispatchEvent(this.element, EVENT_CROP_MOVE, {\n        originalEvent: event,\n        action: action\n      }) === false) {\n        return;\n      }\n\n      if (event.changedTouches) {\n        forEach(event.changedTouches, function (touch) {\n          // The first parameter should not be undefined (#432)\n          assign(pointers[touch.identifier] || {}, getPointer(touch, true));\n        });\n      } else {\n        assign(pointers[event.pointerId || 0] || {}, getPointer(event, true));\n      }\n\n      this.change(event);\n    },\n    cropEnd: function cropEnd(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      var action = this.action,\n          pointers = this.pointers;\n\n      if (event.changedTouches) {\n        forEach(event.changedTouches, function (touch) {\n          delete pointers[touch.identifier];\n        });\n      } else {\n        delete pointers[event.pointerId || 0];\n      }\n\n      if (!action) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if (!Object.keys(pointers).length) {\n        this.action = '';\n      }\n\n      if (this.cropping) {\n        this.cropping = false;\n        toggleClass(this.dragBox, CLASS_MODAL, this.cropped && this.options.modal);\n      }\n\n      dispatchEvent(this.element, EVENT_CROP_END, {\n        originalEvent: event,\n        action: action\n      });\n    }\n  };\n\n  var change = {\n    change: function change(event) {\n      var options = this.options,\n          canvasData = this.canvasData,\n          containerData = this.containerData,\n          cropBoxData = this.cropBoxData,\n          pointers = this.pointers;\n      var action = this.action;\n      var aspectRatio = options.aspectRatio;\n      var left = cropBoxData.left,\n          top = cropBoxData.top,\n          width = cropBoxData.width,\n          height = cropBoxData.height;\n      var right = left + width;\n      var bottom = top + height;\n      var minLeft = 0;\n      var minTop = 0;\n      var maxWidth = containerData.width;\n      var maxHeight = containerData.height;\n      var renderable = true;\n      var offset; // Locking aspect ratio in \"free mode\" by holding shift key\n\n      if (!aspectRatio && event.shiftKey) {\n        aspectRatio = width && height ? width / height : 1;\n      }\n\n      if (this.limited) {\n        minLeft = cropBoxData.minLeft;\n        minTop = cropBoxData.minTop;\n        maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);\n        maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);\n      }\n\n      var pointer = pointers[Object.keys(pointers)[0]];\n      var range = {\n        x: pointer.endX - pointer.startX,\n        y: pointer.endY - pointer.startY\n      };\n\n      var check = function check(side) {\n        switch (side) {\n          case ACTION_EAST:\n            if (right + range.x > maxWidth) {\n              range.x = maxWidth - right;\n            }\n\n            break;\n\n          case ACTION_WEST:\n            if (left + range.x < minLeft) {\n              range.x = minLeft - left;\n            }\n\n            break;\n\n          case ACTION_NORTH:\n            if (top + range.y < minTop) {\n              range.y = minTop - top;\n            }\n\n            break;\n\n          case ACTION_SOUTH:\n            if (bottom + range.y > maxHeight) {\n              range.y = maxHeight - bottom;\n            }\n\n            break;\n\n          default:\n        }\n      };\n\n      switch (action) {\n        // Move crop box\n        case ACTION_ALL:\n          left += range.x;\n          top += range.y;\n          break;\n        // Resize crop box\n\n        case ACTION_EAST:\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_EAST);\n          width += range.x;\n\n          if (width < 0) {\n            action = ACTION_WEST;\n            width = -width;\n            left -= width;\n          }\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += (cropBoxData.height - height) / 2;\n          }\n\n          break;\n\n        case ACTION_NORTH:\n          if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_NORTH);\n          height -= range.y;\n          top += range.y;\n\n          if (height < 0) {\n            action = ACTION_SOUTH;\n            height = -height;\n            top -= height;\n          }\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += (cropBoxData.width - width) / 2;\n          }\n\n          break;\n\n        case ACTION_WEST:\n          if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_WEST);\n          width -= range.x;\n          left += range.x;\n\n          if (width < 0) {\n            action = ACTION_EAST;\n            width = -width;\n            left -= width;\n          }\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += (cropBoxData.height - height) / 2;\n          }\n\n          break;\n\n        case ACTION_SOUTH:\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_SOUTH);\n          height += range.y;\n\n          if (height < 0) {\n            action = ACTION_NORTH;\n            height = -height;\n            top -= height;\n          }\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += (cropBoxData.width - width) / 2;\n          }\n\n          break;\n\n        case ACTION_NORTH_EAST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_NORTH);\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n          } else {\n            check(ACTION_NORTH);\n            check(ACTION_EAST);\n\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_NORTH_WEST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_NORTH_WEST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_NORTH);\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n            left += cropBoxData.width - width;\n          } else {\n            check(ACTION_NORTH);\n            check(ACTION_WEST);\n\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_NORTH_EAST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_SOUTH_WEST:\n          if (aspectRatio) {\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_WEST);\n            width -= range.x;\n            left += range.x;\n            height = width / aspectRatio;\n          } else {\n            check(ACTION_SOUTH);\n            check(ACTION_WEST);\n\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_EAST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_SOUTH_EAST:\n          if (aspectRatio) {\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_EAST);\n            width += range.x;\n            height = width / aspectRatio;\n          } else {\n            check(ACTION_SOUTH);\n            check(ACTION_EAST);\n\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_WEST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n        // Move canvas\n\n        case ACTION_MOVE:\n          this.move(range.x, range.y);\n          renderable = false;\n          break;\n        // Zoom canvas\n\n        case ACTION_ZOOM:\n          this.zoom(getMaxZoomRatio(pointers), event);\n          renderable = false;\n          break;\n        // Create crop box\n\n        case ACTION_CROP:\n          if (!range.x || !range.y) {\n            renderable = false;\n            break;\n          }\n\n          offset = getOffset(this.cropper);\n          left = pointer.startX - offset.left;\n          top = pointer.startY - offset.top;\n          width = cropBoxData.minWidth;\n          height = cropBoxData.minHeight;\n\n          if (range.x > 0) {\n            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n          } else if (range.x < 0) {\n            left -= width;\n            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n          }\n\n          if (range.y < 0) {\n            top -= height;\n          } // Show the crop box if is hidden\n\n\n          if (!this.cropped) {\n            removeClass(this.cropBox, CLASS_HIDDEN);\n            this.cropped = true;\n\n            if (this.limited) {\n              this.limitCropBox(true, true);\n            }\n          }\n\n          break;\n\n        default:\n      }\n\n      if (renderable) {\n        cropBoxData.width = width;\n        cropBoxData.height = height;\n        cropBoxData.left = left;\n        cropBoxData.top = top;\n        this.action = action;\n        this.renderCropBox();\n      } // Override\n\n\n      forEach(pointers, function (p) {\n        p.startX = p.endX;\n        p.startY = p.endY;\n      });\n    }\n  };\n\n  var methods = {\n    // Show the crop box manually\n    crop: function crop() {\n      if (this.ready && !this.cropped && !this.disabled) {\n        this.cropped = true;\n        this.limitCropBox(true, true);\n\n        if (this.options.modal) {\n          addClass(this.dragBox, CLASS_MODAL);\n        }\n\n        removeClass(this.cropBox, CLASS_HIDDEN);\n        this.setCropBoxData(this.initialCropBoxData);\n      }\n\n      return this;\n    },\n    // Reset the image and crop box to their initial states\n    reset: function reset() {\n      if (this.ready && !this.disabled) {\n        this.imageData = assign({}, this.initialImageData);\n        this.canvasData = assign({}, this.initialCanvasData);\n        this.cropBoxData = assign({}, this.initialCropBoxData);\n        this.renderCanvas();\n\n        if (this.cropped) {\n          this.renderCropBox();\n        }\n      }\n\n      return this;\n    },\n    // Clear the crop box\n    clear: function clear() {\n      if (this.cropped && !this.disabled) {\n        assign(this.cropBoxData, {\n          left: 0,\n          top: 0,\n          width: 0,\n          height: 0\n        });\n        this.cropped = false;\n        this.renderCropBox();\n        this.limitCanvas(true, true); // Render canvas after crop box rendered\n\n        this.renderCanvas();\n        removeClass(this.dragBox, CLASS_MODAL);\n        addClass(this.cropBox, CLASS_HIDDEN);\n      }\n\n      return this;\n    },\n\n    /**\n     * Replace the image's src and rebuild the cropper\n     * @param {string} url - The new URL.\n     * @param {boolean} [hasSameSize] - Indicate if the new image has the same size as the old one.\n     * @returns {Cropper} this\n     */\n    replace: function replace(url) {\n      var hasSameSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!this.disabled && url) {\n        if (this.isImg) {\n          this.element.src = url;\n        }\n\n        if (hasSameSize) {\n          this.url = url;\n          this.image.src = url;\n\n          if (this.ready) {\n            this.viewBoxImage.src = url;\n            forEach(this.previews, function (element) {\n              element.getElementsByTagName('img')[0].src = url;\n            });\n          }\n        } else {\n          if (this.isImg) {\n            this.replaced = true;\n          }\n\n          this.options.data = null;\n          this.uncreate();\n          this.load(url);\n        }\n      }\n\n      return this;\n    },\n    // Enable (unfreeze) the cropper\n    enable: function enable() {\n      if (this.ready && this.disabled) {\n        this.disabled = false;\n        removeClass(this.cropper, CLASS_DISABLED);\n      }\n\n      return this;\n    },\n    // Disable (freeze) the cropper\n    disable: function disable() {\n      if (this.ready && !this.disabled) {\n        this.disabled = true;\n        addClass(this.cropper, CLASS_DISABLED);\n      }\n\n      return this;\n    },\n\n    /**\n     * Destroy the cropper and remove the instance from the image\n     * @returns {Cropper} this\n     */\n    destroy: function destroy() {\n      var element = this.element;\n\n      if (!element[NAMESPACE]) {\n        return this;\n      }\n\n      element[NAMESPACE] = undefined;\n\n      if (this.isImg && this.replaced) {\n        element.src = this.originalUrl;\n      }\n\n      this.uncreate();\n      return this;\n    },\n\n    /**\n     * Move the canvas with relative offsets\n     * @param {number} offsetX - The relative offset distance on the x-axis.\n     * @param {number} [offsetY=offsetX] - The relative offset distance on the y-axis.\n     * @returns {Cropper} this\n     */\n    move: function move(offsetX) {\n      var offsetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : offsetX;\n      var _this$canvasData = this.canvasData,\n          left = _this$canvasData.left,\n          top = _this$canvasData.top;\n      return this.moveTo(isUndefined(offsetX) ? offsetX : left + Number(offsetX), isUndefined(offsetY) ? offsetY : top + Number(offsetY));\n    },\n\n    /**\n     * Move the canvas to an absolute point\n     * @param {number} x - The x-axis coordinate.\n     * @param {number} [y=x] - The y-axis coordinate.\n     * @returns {Cropper} this\n     */\n    moveTo: function moveTo(x) {\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n      var canvasData = this.canvasData;\n      var changed = false;\n      x = Number(x);\n      y = Number(y);\n\n      if (this.ready && !this.disabled && this.options.movable) {\n        if (isNumber(x)) {\n          canvasData.left = x;\n          changed = true;\n        }\n\n        if (isNumber(y)) {\n          canvasData.top = y;\n          changed = true;\n        }\n\n        if (changed) {\n          this.renderCanvas(true);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Zoom the canvas with a relative ratio\n     * @param {number} ratio - The target ratio.\n     * @param {Event} _originalEvent - The original event if any.\n     * @returns {Cropper} this\n     */\n    zoom: function zoom(ratio, _originalEvent) {\n      var canvasData = this.canvasData;\n      ratio = Number(ratio);\n\n      if (ratio < 0) {\n        ratio = 1 / (1 - ratio);\n      } else {\n        ratio = 1 + ratio;\n      }\n\n      return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);\n    },\n\n    /**\n     * Zoom the canvas to an absolute ratio\n     * @param {number} ratio - The target ratio.\n     * @param {Object} pivot - The zoom pivot point coordinate.\n     * @param {Event} _originalEvent - The original event if any.\n     * @returns {Cropper} this\n     */\n    zoomTo: function zoomTo(ratio, pivot, _originalEvent) {\n      var options = this.options,\n          canvasData = this.canvasData;\n      var width = canvasData.width,\n          height = canvasData.height,\n          naturalWidth = canvasData.naturalWidth,\n          naturalHeight = canvasData.naturalHeight;\n      ratio = Number(ratio);\n\n      if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {\n        var newWidth = naturalWidth * ratio;\n        var newHeight = naturalHeight * ratio;\n\n        if (dispatchEvent(this.element, EVENT_ZOOM, {\n          ratio: ratio,\n          oldRatio: width / naturalWidth,\n          originalEvent: _originalEvent\n        }) === false) {\n          return this;\n        }\n\n        if (_originalEvent) {\n          var pointers = this.pointers;\n          var offset = getOffset(this.cropper);\n          var center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {\n            pageX: _originalEvent.pageX,\n            pageY: _originalEvent.pageY\n          }; // Zoom from the triggering point of the event\n\n          canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\n        } else if (isPlainObject(pivot) && isNumber(pivot.x) && isNumber(pivot.y)) {\n          canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);\n        } else {\n          // Zoom from the center of the canvas\n          canvasData.left -= (newWidth - width) / 2;\n          canvasData.top -= (newHeight - height) / 2;\n        }\n\n        canvasData.width = newWidth;\n        canvasData.height = newHeight;\n        this.renderCanvas(true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Rotate the canvas with a relative degree\n     * @param {number} degree - The rotate degree.\n     * @returns {Cropper} this\n     */\n    rotate: function rotate(degree) {\n      return this.rotateTo((this.imageData.rotate || 0) + Number(degree));\n    },\n\n    /**\n     * Rotate the canvas to an absolute degree\n     * @param {number} degree - The rotate degree.\n     * @returns {Cropper} this\n     */\n    rotateTo: function rotateTo(degree) {\n      degree = Number(degree);\n\n      if (isNumber(degree) && this.ready && !this.disabled && this.options.rotatable) {\n        this.imageData.rotate = degree % 360;\n        this.renderCanvas(true, true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Scale the image on the x-axis.\n     * @param {number} scaleX - The scale ratio on the x-axis.\n     * @returns {Cropper} this\n     */\n    scaleX: function scaleX(_scaleX) {\n      var scaleY = this.imageData.scaleY;\n      return this.scale(_scaleX, isNumber(scaleY) ? scaleY : 1);\n    },\n\n    /**\n     * Scale the image on the y-axis.\n     * @param {number} scaleY - The scale ratio on the y-axis.\n     * @returns {Cropper} this\n     */\n    scaleY: function scaleY(_scaleY) {\n      var scaleX = this.imageData.scaleX;\n      return this.scale(isNumber(scaleX) ? scaleX : 1, _scaleY);\n    },\n\n    /**\n     * Scale the image\n     * @param {number} scaleX - The scale ratio on the x-axis.\n     * @param {number} [scaleY=scaleX] - The scale ratio on the y-axis.\n     * @returns {Cropper} this\n     */\n    scale: function scale(scaleX) {\n      var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;\n      var imageData = this.imageData;\n      var transformed = false;\n      scaleX = Number(scaleX);\n      scaleY = Number(scaleY);\n\n      if (this.ready && !this.disabled && this.options.scalable) {\n        if (isNumber(scaleX)) {\n          imageData.scaleX = scaleX;\n          transformed = true;\n        }\n\n        if (isNumber(scaleY)) {\n          imageData.scaleY = scaleY;\n          transformed = true;\n        }\n\n        if (transformed) {\n          this.renderCanvas(true, true);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the cropped area position and size data (base on the original image)\n     * @param {boolean} [rounded=false] - Indicate if round the data values or not.\n     * @returns {Object} The result cropped data.\n     */\n    getData: function getData() {\n      var rounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var options = this.options,\n          imageData = this.imageData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var data;\n\n      if (this.ready && this.cropped) {\n        data = {\n          x: cropBoxData.left - canvasData.left,\n          y: cropBoxData.top - canvasData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n        var ratio = imageData.width / imageData.naturalWidth;\n        forEach(data, function (n, i) {\n          data[i] = n / ratio;\n        });\n\n        if (rounded) {\n          // In case rounding off leads to extra 1px in right or bottom border\n          // we should round the top-left corner and the dimension (#343).\n          var bottom = Math.round(data.y + data.height);\n          var right = Math.round(data.x + data.width);\n          data.x = Math.round(data.x);\n          data.y = Math.round(data.y);\n          data.width = right - data.x;\n          data.height = bottom - data.y;\n        }\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      if (options.rotatable) {\n        data.rotate = imageData.rotate || 0;\n      }\n\n      if (options.scalable) {\n        data.scaleX = imageData.scaleX || 1;\n        data.scaleY = imageData.scaleY || 1;\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the cropped area position and size with new data\n     * @param {Object} data - The new data.\n     * @returns {Cropper} this\n     */\n    setData: function setData(data) {\n      var options = this.options,\n          imageData = this.imageData,\n          canvasData = this.canvasData;\n      var cropBoxData = {};\n\n      if (this.ready && !this.disabled && isPlainObject(data)) {\n        var transformed = false;\n\n        if (options.rotatable) {\n          if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n            imageData.rotate = data.rotate;\n            transformed = true;\n          }\n        }\n\n        if (options.scalable) {\n          if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n            imageData.scaleX = data.scaleX;\n            transformed = true;\n          }\n\n          if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n            imageData.scaleY = data.scaleY;\n            transformed = true;\n          }\n        }\n\n        if (transformed) {\n          this.renderCanvas(true, true);\n        }\n\n        var ratio = imageData.width / imageData.naturalWidth;\n\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvasData.left;\n        }\n\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvasData.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n\n        this.setCropBoxData(cropBoxData);\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the container size data.\n     * @returns {Object} The result container data.\n     */\n    getContainerData: function getContainerData() {\n      return this.ready ? assign({}, this.containerData) : {};\n    },\n\n    /**\n     * Get the image position and size data.\n     * @returns {Object} The result image data.\n     */\n    getImageData: function getImageData() {\n      return this.sized ? assign({}, this.imageData) : {};\n    },\n\n    /**\n     * Get the canvas position and size data.\n     * @returns {Object} The result canvas data.\n     */\n    getCanvasData: function getCanvasData() {\n      var canvasData = this.canvasData;\n      var data = {};\n\n      if (this.ready) {\n        forEach(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {\n          data[n] = canvasData[n];\n        });\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the canvas position and size with new data.\n     * @param {Object} data - The new canvas data.\n     * @returns {Cropper} this\n     */\n    setCanvasData: function setCanvasData(data) {\n      var canvasData = this.canvasData;\n      var aspectRatio = canvasData.aspectRatio;\n\n      if (this.ready && !this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvasData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          canvasData.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          canvasData.width = data.width;\n          canvasData.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvasData.height = data.height;\n          canvasData.width = data.height * aspectRatio;\n        }\n\n        this.renderCanvas(true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the crop box position and size data.\n     * @returns {Object} The result crop box data.\n     */\n    getCropBoxData: function getCropBoxData() {\n      var cropBoxData = this.cropBoxData;\n      var data;\n\n      if (this.ready && this.cropped) {\n        data = {\n          left: cropBoxData.left,\n          top: cropBoxData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n      }\n\n      return data || {};\n    },\n\n    /**\n     * Set the crop box position and size with new data.\n     * @param {Object} data - The new crop box data.\n     * @returns {Cropper} this\n     */\n    setCropBoxData: function setCropBoxData(data) {\n      var cropBoxData = this.cropBoxData;\n      var aspectRatio = this.options.aspectRatio;\n      var widthChanged;\n      var heightChanged;\n\n      if (this.ready && this.cropped && !this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          cropBoxData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          cropBoxData.top = data.top;\n        }\n\n        if (isNumber(data.width) && data.width !== cropBoxData.width) {\n          widthChanged = true;\n          cropBoxData.width = data.width;\n        }\n\n        if (isNumber(data.height) && data.height !== cropBoxData.height) {\n          heightChanged = true;\n          cropBoxData.height = data.height;\n        }\n\n        if (aspectRatio) {\n          if (widthChanged) {\n            cropBoxData.height = cropBoxData.width / aspectRatio;\n          } else if (heightChanged) {\n            cropBoxData.width = cropBoxData.height * aspectRatio;\n          }\n        }\n\n        this.renderCropBox();\n      }\n\n      return this;\n    },\n\n    /**\n     * Get a canvas drawn the cropped image.\n     * @param {Object} [options={}] - The config options.\n     * @returns {HTMLCanvasElement} - The result canvas.\n     */\n    getCroppedCanvas: function getCroppedCanvas() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this.ready || !window.HTMLCanvasElement) {\n        return null;\n      }\n\n      var canvasData = this.canvasData;\n      var source = getSourceCanvas(this.image, this.imageData, canvasData, options); // Returns the source canvas if it is not cropped.\n\n      if (!this.cropped) {\n        return source;\n      }\n\n      var _this$getData = this.getData(),\n          initialX = _this$getData.x,\n          initialY = _this$getData.y,\n          initialWidth = _this$getData.width,\n          initialHeight = _this$getData.height;\n\n      var ratio = source.width / Math.floor(canvasData.naturalWidth);\n\n      if (ratio !== 1) {\n        initialX *= ratio;\n        initialY *= ratio;\n        initialWidth *= ratio;\n        initialHeight *= ratio;\n      }\n\n      var aspectRatio = initialWidth / initialHeight;\n      var maxSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.maxWidth || Infinity,\n        height: options.maxHeight || Infinity\n      });\n      var minSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.minWidth || 0,\n        height: options.minHeight || 0\n      }, 'cover');\n\n      var _getAdjustedSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.width || (ratio !== 1 ? source.width : initialWidth),\n        height: options.height || (ratio !== 1 ? source.height : initialHeight)\n      }),\n          width = _getAdjustedSizes.width,\n          height = _getAdjustedSizes.height;\n\n      width = Math.min(maxSizes.width, Math.max(minSizes.width, width));\n      height = Math.min(maxSizes.height, Math.max(minSizes.height, height));\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext('2d');\n      canvas.width = normalizeDecimalNumber(width);\n      canvas.height = normalizeDecimalNumber(height);\n      context.fillStyle = options.fillColor || 'transparent';\n      context.fillRect(0, 0, width, height);\n      var _options$imageSmoothi = options.imageSmoothingEnabled,\n          imageSmoothingEnabled = _options$imageSmoothi === void 0 ? true : _options$imageSmoothi,\n          imageSmoothingQuality = options.imageSmoothingQuality;\n      context.imageSmoothingEnabled = imageSmoothingEnabled;\n\n      if (imageSmoothingQuality) {\n        context.imageSmoothingQuality = imageSmoothingQuality;\n      } // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n\n\n      var sourceWidth = source.width;\n      var sourceHeight = source.height; // Source canvas parameters\n\n      var srcX = initialX;\n      var srcY = initialY;\n      var srcWidth;\n      var srcHeight; // Destination canvas parameters\n\n      var dstX;\n      var dstY;\n      var dstWidth;\n      var dstHeight;\n\n      if (srcX <= -initialWidth || srcX > sourceWidth) {\n        srcX = 0;\n        srcWidth = 0;\n        dstX = 0;\n        dstWidth = 0;\n      } else if (srcX <= 0) {\n        dstX = -srcX;\n        srcX = 0;\n        srcWidth = Math.min(sourceWidth, initialWidth + srcX);\n        dstWidth = srcWidth;\n      } else if (srcX <= sourceWidth) {\n        dstX = 0;\n        srcWidth = Math.min(initialWidth, sourceWidth - srcX);\n        dstWidth = srcWidth;\n      }\n\n      if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {\n        srcY = 0;\n        srcHeight = 0;\n        dstY = 0;\n        dstHeight = 0;\n      } else if (srcY <= 0) {\n        dstY = -srcY;\n        srcY = 0;\n        srcHeight = Math.min(sourceHeight, initialHeight + srcY);\n        dstHeight = srcHeight;\n      } else if (srcY <= sourceHeight) {\n        dstY = 0;\n        srcHeight = Math.min(initialHeight, sourceHeight - srcY);\n        dstHeight = srcHeight;\n      }\n\n      var params = [srcX, srcY, srcWidth, srcHeight]; // Avoid \"IndexSizeError\"\n\n      if (dstWidth > 0 && dstHeight > 0) {\n        var scale = width / initialWidth;\n        params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);\n      } // All the numerical parameters should be integer for `drawImage`\n      // https://github.com/fengyuanchen/cropper/issues/476\n\n\n      context.drawImage.apply(context, [source].concat(_toConsumableArray(params.map(function (param) {\n        return Math.floor(normalizeDecimalNumber(param));\n      }))));\n      return canvas;\n    },\n\n    /**\n     * Change the aspect ratio of the crop box.\n     * @param {number} aspectRatio - The new aspect ratio.\n     * @returns {Cropper} this\n     */\n    setAspectRatio: function setAspectRatio(aspectRatio) {\n      var options = this.options;\n\n      if (!this.disabled && !isUndefined(aspectRatio)) {\n        // 0 -> NaN\n        options.aspectRatio = Math.max(0, aspectRatio) || NaN;\n\n        if (this.ready) {\n          this.initCropBox();\n\n          if (this.cropped) {\n            this.renderCropBox();\n          }\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Change the drag mode.\n     * @param {string} mode - The new drag mode.\n     * @returns {Cropper} this\n     */\n    setDragMode: function setDragMode(mode) {\n      var options = this.options,\n          dragBox = this.dragBox,\n          face = this.face;\n\n      if (this.ready && !this.disabled) {\n        var croppable = mode === DRAG_MODE_CROP;\n        var movable = options.movable && mode === DRAG_MODE_MOVE;\n        mode = croppable || movable ? mode : DRAG_MODE_NONE;\n        options.dragMode = mode;\n        setData(dragBox, DATA_ACTION, mode);\n        toggleClass(dragBox, CLASS_CROP, croppable);\n        toggleClass(dragBox, CLASS_MOVE, movable);\n\n        if (!options.cropBoxMovable) {\n          // Sync drag mode to crop box when it is not movable\n          setData(face, DATA_ACTION, mode);\n          toggleClass(face, CLASS_CROP, croppable);\n          toggleClass(face, CLASS_MOVE, movable);\n        }\n      }\n\n      return this;\n    }\n  };\n\n  var AnotherCropper = WINDOW.Cropper;\n\n  var Cropper =\n  /*#__PURE__*/\n  function () {\n    /**\n     * Create a new Cropper.\n     * @param {Element} element - The target element for cropping.\n     * @param {Object} [options={}] - The configuration options.\n     */\n    function Cropper(element) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, Cropper);\n\n      if (!element || !REGEXP_TAG_NAME.test(element.tagName)) {\n        throw new Error('The first argument is required and must be an <img> or <canvas> element.');\n      }\n\n      this.element = element;\n      this.options = assign({}, DEFAULTS, isPlainObject(options) && options);\n      this.cropped = false;\n      this.disabled = false;\n      this.pointers = {};\n      this.ready = false;\n      this.reloading = false;\n      this.replaced = false;\n      this.sized = false;\n      this.sizing = false;\n      this.init();\n    }\n\n    _createClass(Cropper, [{\n      key: \"init\",\n      value: function init() {\n        var element = this.element;\n        var tagName = element.tagName.toLowerCase();\n        var url;\n\n        if (element[NAMESPACE]) {\n          return;\n        }\n\n        element[NAMESPACE] = this;\n\n        if (tagName === 'img') {\n          this.isImg = true; // e.g.: \"img/picture.jpg\"\n\n          url = element.getAttribute('src') || '';\n          this.originalUrl = url; // Stop when it's a blank image\n\n          if (!url) {\n            return;\n          } // e.g.: \"http://example.com/img/picture.jpg\"\n\n\n          url = element.src;\n        } else if (tagName === 'canvas' && window.HTMLCanvasElement) {\n          url = element.toDataURL();\n        }\n\n        this.load(url);\n      }\n    }, {\n      key: \"load\",\n      value: function load(url) {\n        var _this = this;\n\n        if (!url) {\n          return;\n        }\n\n        this.url = url;\n        this.imageData = {};\n        var element = this.element,\n            options = this.options;\n\n        if (!options.rotatable && !options.scalable) {\n          options.checkOrientation = false;\n        } // Only IE10+ supports Typed Arrays\n\n\n        if (!options.checkOrientation || !window.ArrayBuffer) {\n          this.clone();\n          return;\n        } // Detect the mime type of the image directly if it is a Data URL\n\n\n        if (REGEXP_DATA_URL.test(url)) {\n          // Read ArrayBuffer from Data URL of JPEG images directly for better performance\n          if (REGEXP_DATA_URL_JPEG.test(url)) {\n            this.read(dataURLToArrayBuffer(url));\n          } else {\n            // Only a JPEG image may contains Exif Orientation information,\n            // the rest types of Data URLs are not necessary to check orientation at all.\n            this.clone();\n          }\n\n          return;\n        } // 1. Detect the mime type of the image by a XMLHttpRequest.\n        // 2. Load the image as ArrayBuffer for reading orientation if its a JPEG image.\n\n\n        var xhr = new XMLHttpRequest();\n        var clone = this.clone.bind(this);\n        this.reloading = true;\n        this.xhr = xhr; // 1. Cross origin requests are only supported for protocol schemes:\n        // http, https, data, chrome, chrome-extension.\n        // 2. Access to XMLHttpRequest from a Data URL will be blocked by CORS policy\n        // in some browsers as IE11 and Safari.\n\n        xhr.onabort = clone;\n        xhr.onerror = clone;\n        xhr.ontimeout = clone;\n\n        xhr.onprogress = function () {\n          // Abort the request directly if it not a JPEG image for better performance\n          if (xhr.getResponseHeader('content-type') !== MIME_TYPE_JPEG) {\n            xhr.abort();\n          }\n        };\n\n        xhr.onload = function () {\n          _this.read(xhr.response);\n        };\n\n        xhr.onloadend = function () {\n          _this.reloading = false;\n          _this.xhr = null;\n        }; // Bust cache when there is a \"crossOrigin\" property to avoid browser cache error\n\n\n        if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {\n          url = addTimestamp(url);\n        }\n\n        xhr.open('GET', url);\n        xhr.responseType = 'arraybuffer';\n        xhr.withCredentials = element.crossOrigin === 'use-credentials';\n        xhr.send();\n      }\n    }, {\n      key: \"read\",\n      value: function read(arrayBuffer) {\n        var options = this.options,\n            imageData = this.imageData; // Reset the orientation value to its default value 1\n        // as some iOS browsers will render image with its orientation\n\n        var orientation = resetAndGetOrientation(arrayBuffer);\n        var rotate = 0;\n        var scaleX = 1;\n        var scaleY = 1;\n\n        if (orientation > 1) {\n          // Generate a new URL which has the default orientation value\n          this.url = arrayBufferToDataURL(arrayBuffer, MIME_TYPE_JPEG);\n\n          var _parseOrientation = parseOrientation(orientation);\n\n          rotate = _parseOrientation.rotate;\n          scaleX = _parseOrientation.scaleX;\n          scaleY = _parseOrientation.scaleY;\n        }\n\n        if (options.rotatable) {\n          imageData.rotate = rotate;\n        }\n\n        if (options.scalable) {\n          imageData.scaleX = scaleX;\n          imageData.scaleY = scaleY;\n        }\n\n        this.clone();\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        var element = this.element,\n            url = this.url;\n        var crossOrigin = element.crossOrigin;\n        var crossOriginUrl = url;\n\n        if (this.options.checkCrossOrigin && isCrossOriginURL(url)) {\n          if (!crossOrigin) {\n            crossOrigin = 'anonymous';\n          } // Bust cache when there is not a \"crossOrigin\" property (#519)\n\n\n          crossOriginUrl = addTimestamp(url);\n        }\n\n        this.crossOrigin = crossOrigin;\n        this.crossOriginUrl = crossOriginUrl;\n        var image = document.createElement('img');\n\n        if (crossOrigin) {\n          image.crossOrigin = crossOrigin;\n        }\n\n        image.src = crossOriginUrl || url;\n        image.alt = element.alt || 'The image to crop';\n        this.image = image;\n        image.onload = this.start.bind(this);\n        image.onerror = this.stop.bind(this);\n        addClass(image, CLASS_HIDE);\n        element.parentNode.insertBefore(image, element.nextSibling);\n      }\n    }, {\n      key: \"start\",\n      value: function start() {\n        var _this2 = this;\n\n        var image = this.image;\n        image.onload = null;\n        image.onerror = null;\n        this.sizing = true; // Match all browsers that use WebKit as the layout engine in iOS devices,\n        // such as Safari for iOS, Chrome for iOS, and in-app browsers.\n\n        var isIOSWebKit = WINDOW.navigator && /(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(WINDOW.navigator.userAgent);\n\n        var done = function done(naturalWidth, naturalHeight) {\n          assign(_this2.imageData, {\n            naturalWidth: naturalWidth,\n            naturalHeight: naturalHeight,\n            aspectRatio: naturalWidth / naturalHeight\n          });\n          _this2.sizing = false;\n          _this2.sized = true;\n\n          _this2.build();\n        }; // Most modern browsers (excepts iOS WebKit)\n\n\n        if (image.naturalWidth && !isIOSWebKit) {\n          done(image.naturalWidth, image.naturalHeight);\n          return;\n        }\n\n        var sizingImage = document.createElement('img');\n        var body = document.body || document.documentElement;\n        this.sizingImage = sizingImage;\n\n        sizingImage.onload = function () {\n          done(sizingImage.width, sizingImage.height);\n\n          if (!isIOSWebKit) {\n            body.removeChild(sizingImage);\n          }\n        };\n\n        sizingImage.src = image.src; // iOS WebKit will convert the image automatically\n        // with its orientation once append it into DOM (#279)\n\n        if (!isIOSWebKit) {\n          sizingImage.style.cssText = 'left:0;' + 'max-height:none!important;' + 'max-width:none!important;' + 'min-height:0!important;' + 'min-width:0!important;' + 'opacity:0;' + 'position:absolute;' + 'top:0;' + 'z-index:-1;';\n          body.appendChild(sizingImage);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var image = this.image;\n        image.onload = null;\n        image.onerror = null;\n        image.parentNode.removeChild(image);\n        this.image = null;\n      }\n    }, {\n      key: \"build\",\n      value: function build() {\n        if (!this.sized || this.ready) {\n          return;\n        }\n\n        var element = this.element,\n            options = this.options,\n            image = this.image; // Create cropper elements\n\n        var container = element.parentNode;\n        var template = document.createElement('div');\n        template.innerHTML = TEMPLATE;\n        var cropper = template.querySelector(\".\".concat(NAMESPACE, \"-container\"));\n        var canvas = cropper.querySelector(\".\".concat(NAMESPACE, \"-canvas\"));\n        var dragBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-drag-box\"));\n        var cropBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-crop-box\"));\n        var face = cropBox.querySelector(\".\".concat(NAMESPACE, \"-face\"));\n        this.container = container;\n        this.cropper = cropper;\n        this.canvas = canvas;\n        this.dragBox = dragBox;\n        this.cropBox = cropBox;\n        this.viewBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-view-box\"));\n        this.face = face;\n        canvas.appendChild(image); // Hide the original image\n\n        addClass(element, CLASS_HIDDEN); // Inserts the cropper after to the current image\n\n        container.insertBefore(cropper, element.nextSibling); // Show the image if is hidden\n\n        if (!this.isImg) {\n          removeClass(image, CLASS_HIDE);\n        }\n\n        this.initPreview();\n        this.bind();\n        options.initialAspectRatio = Math.max(0, options.initialAspectRatio) || NaN;\n        options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;\n        options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;\n        addClass(cropBox, CLASS_HIDDEN);\n\n        if (!options.guides) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-dashed\")), CLASS_HIDDEN);\n        }\n\n        if (!options.center) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-center\")), CLASS_HIDDEN);\n        }\n\n        if (options.background) {\n          addClass(cropper, \"\".concat(NAMESPACE, \"-bg\"));\n        }\n\n        if (!options.highlight) {\n          addClass(face, CLASS_INVISIBLE);\n        }\n\n        if (options.cropBoxMovable) {\n          addClass(face, CLASS_MOVE);\n          setData(face, DATA_ACTION, ACTION_ALL);\n        }\n\n        if (!options.cropBoxResizable) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-line\")), CLASS_HIDDEN);\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-point\")), CLASS_HIDDEN);\n        }\n\n        this.render();\n        this.ready = true;\n        this.setDragMode(options.dragMode);\n\n        if (options.autoCrop) {\n          this.crop();\n        }\n\n        this.setData(options.data);\n\n        if (isFunction(options.ready)) {\n          addListener(element, EVENT_READY, options.ready, {\n            once: true\n          });\n        }\n\n        dispatchEvent(element, EVENT_READY);\n      }\n    }, {\n      key: \"unbuild\",\n      value: function unbuild() {\n        if (!this.ready) {\n          return;\n        }\n\n        this.ready = false;\n        this.unbind();\n        this.resetPreview();\n        this.cropper.parentNode.removeChild(this.cropper);\n        removeClass(this.element, CLASS_HIDDEN);\n      }\n    }, {\n      key: \"uncreate\",\n      value: function uncreate() {\n        if (this.ready) {\n          this.unbuild();\n          this.ready = false;\n          this.cropped = false;\n        } else if (this.sizing) {\n          this.sizingImage.onload = null;\n          this.sizing = false;\n          this.sized = false;\n        } else if (this.reloading) {\n          this.xhr.onabort = null;\n          this.xhr.abort();\n        } else if (this.image) {\n          this.stop();\n        }\n      }\n      /**\n       * Get the no conflict cropper class.\n       * @returns {Cropper} The cropper class.\n       */\n\n    }], [{\n      key: \"noConflict\",\n      value: function noConflict() {\n        window.Cropper = AnotherCropper;\n        return Cropper;\n      }\n      /**\n       * Change the default options.\n       * @param {Object} options - The new default options.\n       */\n\n    }, {\n      key: \"setDefaults\",\n      value: function setDefaults(options) {\n        assign(DEFAULTS, isPlainObject(options) && options);\n      }\n    }]);\n\n    return Cropper;\n  }();\n\n  assign(Cropper.prototype, render, preview, events, handlers, change, methods);\n\n  return Cropper;\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_cropperjs@1.5.6@cropperjs/dist/cropper.js\n// module id = G1Fc\n// module chunks = 1","<template>\n  <div>\n    <div class = \"crumbs\">\n      <el-breadcrumb separator = \"/\">\n        <el-breadcrumb-item><i class = \"el-icon-lx-calendar\"></i>表格上传</el-breadcrumb-item>\n      </el-breadcrumb>\n    </div>\n    <div class = \"container\">\n      <div class = \"content-title\">表格数据上传</div>\n      <el-upload\n        class = \"upload-demo\"\n        name = \"file\"\n        :action = \"$url+'/api/admin/file/databulk'\"\n        multiple>\n        <i class = \"el-icon-upload\"></i>\n        <div class = \"el-upload__text\">将文件拖到此处，或<em>点击上传</em></div>\n      </el-upload>\n      <!--<div class=\"content-title\">支持裁剪</div>-->\n      <!--<div class=\"plugins-tips\">-->\n      <!--    vue-cropperjs：一个封装了 cropperjs 的 Vue 组件。-->\n      <!--    访问地址：<a href=\"https://github.com/Agontuk/vue-cropperjs\" target=\"_blank\">vue-cropperjs</a>-->\n      <!--</div>-->\n      <!--<div class=\"crop-demo\">-->\n      <!--    <img :src=\"cropImg\" class=\"pre-img\">-->\n      <!--    <div class=\"crop-demo-btn\">选择图片-->\n      <!--        <input class=\"crop-input\" type=\"file\" name=\"image\" accept=\"image/*\" @change=\"setImage\"/>-->\n      <!--    </div>-->\n      <!--</div>-->\n      <!--<el-dialog title=\"裁剪图片\" :visible.sync=\"dialogVisible\" width=\"30%\">-->\n      <!--    <vue-cropper ref='cropper' :src=\"imgSrc\" :ready=\"cropImage\" :zoom=\"cropImage\" :cropmove=\"cropImage\" style=\"width:100%;height:300px;\"></vue-cropper>-->\n      <!--    <span slot=\"footer\" class=\"dialog-footer\">-->\n      <!--        <el-button @click=\"cancelCrop\">取 消</el-button>-->\n      <!--        <el-button type=\"primary\" @click=\"dialogVisible = false\">确 定</el-button>-->\n      <!--    </span>-->\n      <!--</el-dialog>-->\n    </div>\n  </div>\n</template>\n<script>\n  import VueCropper from 'vue-cropperjs';\n\n  export default {\n    name: 'upload',\n    data: function () {\n      return {\n        defaultSrc: './static/img/img.jpg',\n        fileList: [],\n        imgSrc: '',\n        cropImg: '',\n        dialogVisible: false,\n      }\n    },\n    components: {\n      VueCropper\n    },\n    methods: {\n      setImage(e) {\n        const file = e.target.files[0];\n        if (!file.type.includes('image/')) {\n          return;\n        }\n        const reader = new FileReader();\n        reader.onload = (event) => {\n          this.dialogVisible = true;\n          this.imgSrc = event.target.result;\n          this.$refs.cropper && this.$refs.cropper.replace(event.target.result);\n        };\n        reader.readAsDataURL(file);\n      },\n      cropImage() {\n        this.cropImg = this.$refs.cropper.getCroppedCanvas().toDataURL();\n      },\n      cancelCrop() {\n        this.dialogVisible = false;\n        this.cropImg = this.defaultSrc;\n      },\n      imageuploaded(res) {\n        console.log(res)\n      },\n      handleError() {\n        this.$notify.error({\n          title: '上传失败',\n          message: '图片上传接口上传失败，可更改为自己的服务器接口'\n        });\n      }\n    },\n    created() {\n      this.cropImg = this.defaultSrc;\n    }\n  }\n</script>\n<style scoped>\n  .content-title {\n    font-weight: 400;\n    line-height: 50px;\n    margin: 10px 0;\n    font-size: 22px;\n    color: #1f2f3d;\n  }\n  \n  .pre-img {\n    width: 100px;\n    height: 100px;\n    background: #f8f8f8;\n    border: 1px solid #eee;\n    border-radius: 5px;\n  }\n  \n  .crop-demo {\n    display: flex;\n    align-items: flex-end;\n  }\n  \n  .crop-demo-btn {\n    position: relative;\n    width: 100px;\n    height: 40px;\n    line-height: 40px;\n    padding: 0 20px;\n    margin-left: 30px;\n    background-color: #409eff;\n    color: #fff;\n    font-size: 14px;\n    border-radius: 4px;\n    box-sizing: border-box;\n  }\n  \n  .crop-input {\n    position: absolute;\n    width: 100px;\n    height: 40px;\n    left: 0;\n    top: 0;\n    opacity: 0;\n    cursor: pointer;\n  }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/view/Upload.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"crumbs\"},[_c('el-breadcrumb',{attrs:{\"separator\":\"/\"}},[_c('el-breadcrumb-item',[_c('i',{staticClass:\"el-icon-lx-calendar\"}),_vm._v(\"表格上传\")])],1)],1),_vm._v(\" \"),_c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"content-title\"},[_vm._v(\"表格数据上传\")]),_vm._v(\" \"),_c('el-upload',{staticClass:\"upload-demo\",attrs:{\"name\":\"file\",\"action\":_vm.$url+'/api/admin/file/databulk',\"multiple\":\"\"}},[_c('i',{staticClass:\"el-icon-upload\"}),_vm._v(\" \"),_c('div',{staticClass:\"el-upload__text\"},[_vm._v(\"将文件拖到此处，或\"),_c('em',[_vm._v(\"点击上传\")])])])],1)])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-1ee93d43\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/components/view/Upload.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1ee93d43\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=0!./Upload.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./Upload.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./Upload.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1ee93d43\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./Upload.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-1ee93d43\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/view/Upload.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}